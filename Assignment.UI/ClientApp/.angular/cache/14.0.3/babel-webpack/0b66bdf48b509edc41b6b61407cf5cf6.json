{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function (d, b) {\n  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\n  function __() {\n    this.constructor = d;\n  }\n\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n\nvar Immediate_1 = require('../util/Immediate');\n\nvar AsyncAction_1 = require('./AsyncAction');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\n\n\nvar AsapAction = function (_super) {\n  __extends(AsapAction, _super);\n\n  function AsapAction(scheduler, work) {\n    _super.call(this, scheduler, work);\n\n    this.scheduler = scheduler;\n    this.work = work;\n  }\n\n  AsapAction.prototype.requestAsyncId = function (scheduler, id, delay) {\n    if (delay === void 0) {\n      delay = 0;\n    } // If delay is greater than 0, request as an async action.\n\n\n    if (delay !== null && delay > 0) {\n      return _super.prototype.requestAsyncId.call(this, scheduler, id, delay);\n    } // Push the action to the end of the scheduler queue.\n\n\n    scheduler.actions.push(this); // If a microtask has already been scheduled, don't schedule another\n    // one. If a microtask hasn't been scheduled yet, schedule one now. Return\n    // the current scheduled microtask id.\n\n    return scheduler.scheduled || (scheduler.scheduled = Immediate_1.Immediate.setImmediate(scheduler.flush.bind(scheduler, null)));\n  };\n\n  AsapAction.prototype.recycleAsyncId = function (scheduler, id, delay) {\n    if (delay === void 0) {\n      delay = 0;\n    } // If delay exists and is greater than 0, or if the delay is null (the\n    // action wasn't rescheduled) but was originally scheduled as an async\n    // action, then recycle as an async action.\n\n\n    if (delay !== null && delay > 0 || delay === null && this.delay > 0) {\n      return _super.prototype.recycleAsyncId.call(this, scheduler, id, delay);\n    } // If the scheduler queue is empty, cancel the requested microtask and\n    // set the scheduled flag to undefined so the next AsapAction will schedule\n    // its own.\n\n\n    if (scheduler.actions.length === 0) {\n      Immediate_1.Immediate.clearImmediate(id);\n      scheduler.scheduled = undefined;\n    } // Return undefined so the action knows to request a new async id if it's rescheduled.\n\n\n    return undefined;\n  };\n\n  return AsapAction;\n}(AsyncAction_1.AsyncAction);\n\nexports.AsapAction = AsapAction;","map":{"version":3,"names":["__extends","d","b","p","hasOwnProperty","__","constructor","prototype","Object","create","Immediate_1","require","AsyncAction_1","AsapAction","_super","scheduler","work","call","requestAsyncId","id","delay","actions","push","scheduled","Immediate","setImmediate","flush","bind","recycleAsyncId","length","clearImmediate","undefined","AsyncAction","exports"],"sources":["C:/Users/vidit.jain/node_modules/rxjs/scheduler/AsapAction.js"],"sourcesContent":["\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Immediate_1 = require('../util/Immediate');\nvar AsyncAction_1 = require('./AsyncAction');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar AsapAction = (function (_super) {\n    __extends(AsapAction, _super);\n    function AsapAction(scheduler, work) {\n        _super.call(this, scheduler, work);\n        this.scheduler = scheduler;\n        this.work = work;\n    }\n    AsapAction.prototype.requestAsyncId = function (scheduler, id, delay) {\n        if (delay === void 0) { delay = 0; }\n        // If delay is greater than 0, request as an async action.\n        if (delay !== null && delay > 0) {\n            return _super.prototype.requestAsyncId.call(this, scheduler, id, delay);\n        }\n        // Push the action to the end of the scheduler queue.\n        scheduler.actions.push(this);\n        // If a microtask has already been scheduled, don't schedule another\n        // one. If a microtask hasn't been scheduled yet, schedule one now. Return\n        // the current scheduled microtask id.\n        return scheduler.scheduled || (scheduler.scheduled = Immediate_1.Immediate.setImmediate(scheduler.flush.bind(scheduler, null)));\n    };\n    AsapAction.prototype.recycleAsyncId = function (scheduler, id, delay) {\n        if (delay === void 0) { delay = 0; }\n        // If delay exists and is greater than 0, or if the delay is null (the\n        // action wasn't rescheduled) but was originally scheduled as an async\n        // action, then recycle as an async action.\n        if ((delay !== null && delay > 0) || (delay === null && this.delay > 0)) {\n            return _super.prototype.recycleAsyncId.call(this, scheduler, id, delay);\n        }\n        // If the scheduler queue is empty, cancel the requested microtask and\n        // set the scheduled flag to undefined so the next AsapAction will schedule\n        // its own.\n        if (scheduler.actions.length === 0) {\n            Immediate_1.Immediate.clearImmediate(id);\n            scheduler.scheduled = undefined;\n        }\n        // Return undefined so the action knows to request a new async id if it's rescheduled.\n        return undefined;\n    };\n    return AsapAction;\n}(AsyncAction_1.AsyncAction));\nexports.AsapAction = AsapAction;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}
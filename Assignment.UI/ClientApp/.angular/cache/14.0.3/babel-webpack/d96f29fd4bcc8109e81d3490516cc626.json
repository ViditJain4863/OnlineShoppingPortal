{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function (d, b) {\n  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\n  function __() {\n    this.constructor = d;\n  }\n\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n\nvar ArrayObservable_1 = require('../observable/ArrayObservable');\n\nvar isArray_1 = require('../util/isArray');\n\nvar OuterSubscriber_1 = require('../OuterSubscriber');\n\nvar subscribeToResult_1 = require('../util/subscribeToResult');\n\nvar none = {};\n/* tslint:enable:max-line-length */\n\n/**\n * Combines multiple Observables to create an Observable whose values are\n * calculated from the latest values of each of its input Observables.\n *\n * <span class=\"informal\">Whenever any input Observable emits a value, it\n * computes a formula using the latest values from all the inputs, then emits\n * the output of that formula.</span>\n *\n * <img src=\"./img/combineLatest.png\" width=\"100%\">\n *\n * `combineLatest` combines the values from this Observable with values from\n * Observables passed as arguments. This is done by subscribing to each\n * Observable, in order, and collecting an array of each of the most recent\n * values any time any of the input Observables emits, then either taking that\n * array and passing it as arguments to an optional `project` function and\n * emitting the return value of that, or just emitting the array of recent\n * values directly if there is no `project` function.\n *\n * @example <caption>Dynamically calculate the Body-Mass Index from an Observable of weight and one for height</caption>\n * var weight = Rx.Observable.of(70, 72, 76, 79, 75);\n * var height = Rx.Observable.of(1.76, 1.77, 1.78);\n * var bmi = weight.combineLatest(height, (w, h) => w / (h * h));\n * bmi.subscribe(x => console.log('BMI is ' + x));\n *\n * // With output to console:\n * // BMI is 24.212293388429753\n * // BMI is 23.93948099205209\n * // BMI is 23.671253629592222\n *\n * @see {@link combineAll}\n * @see {@link merge}\n * @see {@link withLatestFrom}\n *\n * @param {ObservableInput} other An input Observable to combine with the source\n * Observable. More than one input Observables may be given as argument.\n * @param {function} [project] An optional function to project the values from\n * the combined latest values into a new value on the output Observable.\n * @return {Observable} An Observable of projected values from the most recent\n * values from each input Observable, or an array of the most recent values from\n * each input Observable.\n * @method combineLatest\n * @owner Observable\n */\n\nfunction combineLatest() {\n  var observables = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    observables[_i - 0] = arguments[_i];\n  }\n\n  var project = null;\n\n  if (typeof observables[observables.length - 1] === 'function') {\n    project = observables.pop();\n  } // if the first and only other argument besides the resultSelector is an array\n  // assume it's been called with `combineLatest([obs1, obs2, obs3], project)`\n\n\n  if (observables.length === 1 && isArray_1.isArray(observables[0])) {\n    observables = observables[0].slice();\n  }\n\n  return function (source) {\n    return source.lift.call(new ArrayObservable_1.ArrayObservable([source].concat(observables)), new CombineLatestOperator(project));\n  };\n}\n\nexports.combineLatest = combineLatest;\n\nvar CombineLatestOperator = function () {\n  function CombineLatestOperator(project) {\n    this.project = project;\n  }\n\n  CombineLatestOperator.prototype.call = function (subscriber, source) {\n    return source.subscribe(new CombineLatestSubscriber(subscriber, this.project));\n  };\n\n  return CombineLatestOperator;\n}();\n\nexports.CombineLatestOperator = CombineLatestOperator;\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\n\nvar CombineLatestSubscriber = function (_super) {\n  __extends(CombineLatestSubscriber, _super);\n\n  function CombineLatestSubscriber(destination, project) {\n    _super.call(this, destination);\n\n    this.project = project;\n    this.active = 0;\n    this.values = [];\n    this.observables = [];\n  }\n\n  CombineLatestSubscriber.prototype._next = function (observable) {\n    this.values.push(none);\n    this.observables.push(observable);\n  };\n\n  CombineLatestSubscriber.prototype._complete = function () {\n    var observables = this.observables;\n    var len = observables.length;\n\n    if (len === 0) {\n      this.destination.complete();\n    } else {\n      this.active = len;\n      this.toRespond = len;\n\n      for (var i = 0; i < len; i++) {\n        var observable = observables[i];\n        this.add(subscribeToResult_1.subscribeToResult(this, observable, observable, i));\n      }\n    }\n  };\n\n  CombineLatestSubscriber.prototype.notifyComplete = function (unused) {\n    if ((this.active -= 1) === 0) {\n      this.destination.complete();\n    }\n  };\n\n  CombineLatestSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n    var values = this.values;\n    var oldVal = values[outerIndex];\n    var toRespond = !this.toRespond ? 0 : oldVal === none ? --this.toRespond : this.toRespond;\n    values[outerIndex] = innerValue;\n\n    if (toRespond === 0) {\n      if (this.project) {\n        this._tryProject(values);\n      } else {\n        this.destination.next(values.slice());\n      }\n    }\n  };\n\n  CombineLatestSubscriber.prototype._tryProject = function (values) {\n    var result;\n\n    try {\n      result = this.project.apply(this, values);\n    } catch (err) {\n      this.destination.error(err);\n      return;\n    }\n\n    this.destination.next(result);\n  };\n\n  return CombineLatestSubscriber;\n}(OuterSubscriber_1.OuterSubscriber);\n\nexports.CombineLatestSubscriber = CombineLatestSubscriber;","map":{"version":3,"names":["__extends","d","b","p","hasOwnProperty","__","constructor","prototype","Object","create","ArrayObservable_1","require","isArray_1","OuterSubscriber_1","subscribeToResult_1","none","combineLatest","observables","_i","arguments","length","project","pop","isArray","slice","source","lift","call","ArrayObservable","concat","CombineLatestOperator","exports","subscriber","subscribe","CombineLatestSubscriber","_super","destination","active","values","_next","observable","push","_complete","len","complete","toRespond","i","add","subscribeToResult","notifyComplete","unused","notifyNext","outerValue","innerValue","outerIndex","innerIndex","innerSub","oldVal","_tryProject","next","result","apply","err","error","OuterSubscriber"],"sources":["C:/Users/vidit.jain/node_modules/rxjs/operators/combineLatest.js"],"sourcesContent":["\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar ArrayObservable_1 = require('../observable/ArrayObservable');\nvar isArray_1 = require('../util/isArray');\nvar OuterSubscriber_1 = require('../OuterSubscriber');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\nvar none = {};\n/* tslint:enable:max-line-length */\n/**\n * Combines multiple Observables to create an Observable whose values are\n * calculated from the latest values of each of its input Observables.\n *\n * <span class=\"informal\">Whenever any input Observable emits a value, it\n * computes a formula using the latest values from all the inputs, then emits\n * the output of that formula.</span>\n *\n * <img src=\"./img/combineLatest.png\" width=\"100%\">\n *\n * `combineLatest` combines the values from this Observable with values from\n * Observables passed as arguments. This is done by subscribing to each\n * Observable, in order, and collecting an array of each of the most recent\n * values any time any of the input Observables emits, then either taking that\n * array and passing it as arguments to an optional `project` function and\n * emitting the return value of that, or just emitting the array of recent\n * values directly if there is no `project` function.\n *\n * @example <caption>Dynamically calculate the Body-Mass Index from an Observable of weight and one for height</caption>\n * var weight = Rx.Observable.of(70, 72, 76, 79, 75);\n * var height = Rx.Observable.of(1.76, 1.77, 1.78);\n * var bmi = weight.combineLatest(height, (w, h) => w / (h * h));\n * bmi.subscribe(x => console.log('BMI is ' + x));\n *\n * // With output to console:\n * // BMI is 24.212293388429753\n * // BMI is 23.93948099205209\n * // BMI is 23.671253629592222\n *\n * @see {@link combineAll}\n * @see {@link merge}\n * @see {@link withLatestFrom}\n *\n * @param {ObservableInput} other An input Observable to combine with the source\n * Observable. More than one input Observables may be given as argument.\n * @param {function} [project] An optional function to project the values from\n * the combined latest values into a new value on the output Observable.\n * @return {Observable} An Observable of projected values from the most recent\n * values from each input Observable, or an array of the most recent values from\n * each input Observable.\n * @method combineLatest\n * @owner Observable\n */\nfunction combineLatest() {\n    var observables = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        observables[_i - 0] = arguments[_i];\n    }\n    var project = null;\n    if (typeof observables[observables.length - 1] === 'function') {\n        project = observables.pop();\n    }\n    // if the first and only other argument besides the resultSelector is an array\n    // assume it's been called with `combineLatest([obs1, obs2, obs3], project)`\n    if (observables.length === 1 && isArray_1.isArray(observables[0])) {\n        observables = observables[0].slice();\n    }\n    return function (source) { return source.lift.call(new ArrayObservable_1.ArrayObservable([source].concat(observables)), new CombineLatestOperator(project)); };\n}\nexports.combineLatest = combineLatest;\nvar CombineLatestOperator = (function () {\n    function CombineLatestOperator(project) {\n        this.project = project;\n    }\n    CombineLatestOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new CombineLatestSubscriber(subscriber, this.project));\n    };\n    return CombineLatestOperator;\n}());\nexports.CombineLatestOperator = CombineLatestOperator;\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar CombineLatestSubscriber = (function (_super) {\n    __extends(CombineLatestSubscriber, _super);\n    function CombineLatestSubscriber(destination, project) {\n        _super.call(this, destination);\n        this.project = project;\n        this.active = 0;\n        this.values = [];\n        this.observables = [];\n    }\n    CombineLatestSubscriber.prototype._next = function (observable) {\n        this.values.push(none);\n        this.observables.push(observable);\n    };\n    CombineLatestSubscriber.prototype._complete = function () {\n        var observables = this.observables;\n        var len = observables.length;\n        if (len === 0) {\n            this.destination.complete();\n        }\n        else {\n            this.active = len;\n            this.toRespond = len;\n            for (var i = 0; i < len; i++) {\n                var observable = observables[i];\n                this.add(subscribeToResult_1.subscribeToResult(this, observable, observable, i));\n            }\n        }\n    };\n    CombineLatestSubscriber.prototype.notifyComplete = function (unused) {\n        if ((this.active -= 1) === 0) {\n            this.destination.complete();\n        }\n    };\n    CombineLatestSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        var values = this.values;\n        var oldVal = values[outerIndex];\n        var toRespond = !this.toRespond\n            ? 0\n            : oldVal === none ? --this.toRespond : this.toRespond;\n        values[outerIndex] = innerValue;\n        if (toRespond === 0) {\n            if (this.project) {\n                this._tryProject(values);\n            }\n            else {\n                this.destination.next(values.slice());\n            }\n        }\n    };\n    CombineLatestSubscriber.prototype._tryProject = function (values) {\n        var result;\n        try {\n            result = this.project.apply(this, values);\n        }\n        catch (err) {\n            this.destination.error(err);\n            return;\n        }\n        this.destination.next(result);\n    };\n    return CombineLatestSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\nexports.CombineLatestSubscriber = CombineLatestSubscriber;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}
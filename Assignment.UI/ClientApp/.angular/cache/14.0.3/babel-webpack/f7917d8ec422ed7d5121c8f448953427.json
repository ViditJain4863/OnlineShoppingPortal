{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function (d, b) {\n  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\n  function __() {\n    this.constructor = d;\n  }\n\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n\nvar Subject_1 = require('../Subject');\n\nvar Observable_1 = require('../Observable');\n\nvar Subscriber_1 = require('../Subscriber');\n\nvar Subscription_1 = require('../Subscription');\n\nvar refCount_1 = require('../operators/refCount');\n/**\n * @class ConnectableObservable<T>\n */\n\n\nvar ConnectableObservable = function (_super) {\n  __extends(ConnectableObservable, _super);\n\n  function ConnectableObservable(\n  /** @deprecated internal use only */\n  source,\n  /** @deprecated internal use only */\n  subjectFactory) {\n    _super.call(this);\n\n    this.source = source;\n    this.subjectFactory = subjectFactory;\n    /** @deprecated internal use only */\n\n    this._refCount = 0;\n    this._isComplete = false;\n  }\n  /** @deprecated internal use only */\n\n\n  ConnectableObservable.prototype._subscribe = function (subscriber) {\n    return this.getSubject().subscribe(subscriber);\n  };\n  /** @deprecated internal use only */\n\n\n  ConnectableObservable.prototype.getSubject = function () {\n    var subject = this._subject;\n\n    if (!subject || subject.isStopped) {\n      this._subject = this.subjectFactory();\n    }\n\n    return this._subject;\n  };\n\n  ConnectableObservable.prototype.connect = function () {\n    var connection = this._connection;\n\n    if (!connection) {\n      this._isComplete = false;\n      connection = this._connection = new Subscription_1.Subscription();\n      connection.add(this.source.subscribe(new ConnectableSubscriber(this.getSubject(), this)));\n\n      if (connection.closed) {\n        this._connection = null;\n        connection = Subscription_1.Subscription.EMPTY;\n      } else {\n        this._connection = connection;\n      }\n    }\n\n    return connection;\n  };\n\n  ConnectableObservable.prototype.refCount = function () {\n    return refCount_1.refCount()(this);\n  };\n\n  return ConnectableObservable;\n}(Observable_1.Observable);\n\nexports.ConnectableObservable = ConnectableObservable;\nvar connectableProto = ConnectableObservable.prototype;\nexports.connectableObservableDescriptor = {\n  operator: {\n    value: null\n  },\n  _refCount: {\n    value: 0,\n    writable: true\n  },\n  _subject: {\n    value: null,\n    writable: true\n  },\n  _connection: {\n    value: null,\n    writable: true\n  },\n  _subscribe: {\n    value: connectableProto._subscribe\n  },\n  _isComplete: {\n    value: connectableProto._isComplete,\n    writable: true\n  },\n  getSubject: {\n    value: connectableProto.getSubject\n  },\n  connect: {\n    value: connectableProto.connect\n  },\n  refCount: {\n    value: connectableProto.refCount\n  }\n};\n\nvar ConnectableSubscriber = function (_super) {\n  __extends(ConnectableSubscriber, _super);\n\n  function ConnectableSubscriber(destination, connectable) {\n    _super.call(this, destination);\n\n    this.connectable = connectable;\n  }\n\n  ConnectableSubscriber.prototype._error = function (err) {\n    this._unsubscribe();\n\n    _super.prototype._error.call(this, err);\n  };\n\n  ConnectableSubscriber.prototype._complete = function () {\n    this.connectable._isComplete = true;\n\n    this._unsubscribe();\n\n    _super.prototype._complete.call(this);\n  };\n  /** @deprecated internal use only */\n\n\n  ConnectableSubscriber.prototype._unsubscribe = function () {\n    var connectable = this.connectable;\n\n    if (connectable) {\n      this.connectable = null;\n      var connection = connectable._connection;\n      connectable._refCount = 0;\n      connectable._subject = null;\n      connectable._connection = null;\n\n      if (connection) {\n        connection.unsubscribe();\n      }\n    }\n  };\n\n  return ConnectableSubscriber;\n}(Subject_1.SubjectSubscriber);\n\nvar RefCountOperator = function () {\n  function RefCountOperator(connectable) {\n    this.connectable = connectable;\n  }\n\n  RefCountOperator.prototype.call = function (subscriber, source) {\n    var connectable = this.connectable;\n    connectable._refCount++;\n    var refCounter = new RefCountSubscriber(subscriber, connectable);\n    var subscription = source.subscribe(refCounter);\n\n    if (!refCounter.closed) {\n      refCounter.connection = connectable.connect();\n    }\n\n    return subscription;\n  };\n\n  return RefCountOperator;\n}();\n\nvar RefCountSubscriber = function (_super) {\n  __extends(RefCountSubscriber, _super);\n\n  function RefCountSubscriber(destination, connectable) {\n    _super.call(this, destination);\n\n    this.connectable = connectable;\n  }\n  /** @deprecated internal use only */\n\n\n  RefCountSubscriber.prototype._unsubscribe = function () {\n    var connectable = this.connectable;\n\n    if (!connectable) {\n      this.connection = null;\n      return;\n    }\n\n    this.connectable = null;\n    var refCount = connectable._refCount;\n\n    if (refCount <= 0) {\n      this.connection = null;\n      return;\n    }\n\n    connectable._refCount = refCount - 1;\n\n    if (refCount > 1) {\n      this.connection = null;\n      return;\n    } ///\n    // Compare the local RefCountSubscriber's connection Subscription to the\n    // connection Subscription on the shared ConnectableObservable. In cases\n    // where the ConnectableObservable source synchronously emits values, and\n    // the RefCountSubscriber's downstream Observers synchronously unsubscribe,\n    // execution continues to here before the RefCountOperator has a chance to\n    // supply the RefCountSubscriber with the shared connection Subscription.\n    // For example:\n    // ```\n    // Observable.range(0, 10)\n    //   .publish()\n    //   .refCount()\n    //   .take(5)\n    //   .subscribe();\n    // ```\n    // In order to account for this case, RefCountSubscriber should only dispose\n    // the ConnectableObservable's shared connection Subscription if the\n    // connection Subscription exists, *and* either:\n    //   a. RefCountSubscriber doesn't have a reference to the shared connection\n    //      Subscription yet, or,\n    //   b. RefCountSubscriber's connection Subscription reference is identical\n    //      to the shared connection Subscription\n    ///\n\n\n    var connection = this.connection;\n    var sharedConnection = connectable._connection;\n    this.connection = null;\n\n    if (sharedConnection && (!connection || sharedConnection === connection)) {\n      sharedConnection.unsubscribe();\n    }\n  };\n\n  return RefCountSubscriber;\n}(Subscriber_1.Subscriber);","map":{"version":3,"names":["__extends","d","b","p","hasOwnProperty","__","constructor","prototype","Object","create","Subject_1","require","Observable_1","Subscriber_1","Subscription_1","refCount_1","ConnectableObservable","_super","source","subjectFactory","call","_refCount","_isComplete","_subscribe","subscriber","getSubject","subscribe","subject","_subject","isStopped","connect","connection","_connection","Subscription","add","ConnectableSubscriber","closed","EMPTY","refCount","Observable","exports","connectableProto","connectableObservableDescriptor","operator","value","writable","destination","connectable","_error","err","_unsubscribe","_complete","unsubscribe","SubjectSubscriber","RefCountOperator","refCounter","RefCountSubscriber","subscription","sharedConnection","Subscriber"],"sources":["C:/Users/vidit.jain/node_modules/rxjs/observable/ConnectableObservable.js"],"sourcesContent":["\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subject_1 = require('../Subject');\nvar Observable_1 = require('../Observable');\nvar Subscriber_1 = require('../Subscriber');\nvar Subscription_1 = require('../Subscription');\nvar refCount_1 = require('../operators/refCount');\n/**\n * @class ConnectableObservable<T>\n */\nvar ConnectableObservable = (function (_super) {\n    __extends(ConnectableObservable, _super);\n    function ConnectableObservable(/** @deprecated internal use only */ source, \n        /** @deprecated internal use only */ subjectFactory) {\n        _super.call(this);\n        this.source = source;\n        this.subjectFactory = subjectFactory;\n        /** @deprecated internal use only */ this._refCount = 0;\n        this._isComplete = false;\n    }\n    /** @deprecated internal use only */ ConnectableObservable.prototype._subscribe = function (subscriber) {\n        return this.getSubject().subscribe(subscriber);\n    };\n    /** @deprecated internal use only */ ConnectableObservable.prototype.getSubject = function () {\n        var subject = this._subject;\n        if (!subject || subject.isStopped) {\n            this._subject = this.subjectFactory();\n        }\n        return this._subject;\n    };\n    ConnectableObservable.prototype.connect = function () {\n        var connection = this._connection;\n        if (!connection) {\n            this._isComplete = false;\n            connection = this._connection = new Subscription_1.Subscription();\n            connection.add(this.source\n                .subscribe(new ConnectableSubscriber(this.getSubject(), this)));\n            if (connection.closed) {\n                this._connection = null;\n                connection = Subscription_1.Subscription.EMPTY;\n            }\n            else {\n                this._connection = connection;\n            }\n        }\n        return connection;\n    };\n    ConnectableObservable.prototype.refCount = function () {\n        return refCount_1.refCount()(this);\n    };\n    return ConnectableObservable;\n}(Observable_1.Observable));\nexports.ConnectableObservable = ConnectableObservable;\nvar connectableProto = ConnectableObservable.prototype;\nexports.connectableObservableDescriptor = {\n    operator: { value: null },\n    _refCount: { value: 0, writable: true },\n    _subject: { value: null, writable: true },\n    _connection: { value: null, writable: true },\n    _subscribe: { value: connectableProto._subscribe },\n    _isComplete: { value: connectableProto._isComplete, writable: true },\n    getSubject: { value: connectableProto.getSubject },\n    connect: { value: connectableProto.connect },\n    refCount: { value: connectableProto.refCount }\n};\nvar ConnectableSubscriber = (function (_super) {\n    __extends(ConnectableSubscriber, _super);\n    function ConnectableSubscriber(destination, connectable) {\n        _super.call(this, destination);\n        this.connectable = connectable;\n    }\n    ConnectableSubscriber.prototype._error = function (err) {\n        this._unsubscribe();\n        _super.prototype._error.call(this, err);\n    };\n    ConnectableSubscriber.prototype._complete = function () {\n        this.connectable._isComplete = true;\n        this._unsubscribe();\n        _super.prototype._complete.call(this);\n    };\n    /** @deprecated internal use only */ ConnectableSubscriber.prototype._unsubscribe = function () {\n        var connectable = this.connectable;\n        if (connectable) {\n            this.connectable = null;\n            var connection = connectable._connection;\n            connectable._refCount = 0;\n            connectable._subject = null;\n            connectable._connection = null;\n            if (connection) {\n                connection.unsubscribe();\n            }\n        }\n    };\n    return ConnectableSubscriber;\n}(Subject_1.SubjectSubscriber));\nvar RefCountOperator = (function () {\n    function RefCountOperator(connectable) {\n        this.connectable = connectable;\n    }\n    RefCountOperator.prototype.call = function (subscriber, source) {\n        var connectable = this.connectable;\n        connectable._refCount++;\n        var refCounter = new RefCountSubscriber(subscriber, connectable);\n        var subscription = source.subscribe(refCounter);\n        if (!refCounter.closed) {\n            refCounter.connection = connectable.connect();\n        }\n        return subscription;\n    };\n    return RefCountOperator;\n}());\nvar RefCountSubscriber = (function (_super) {\n    __extends(RefCountSubscriber, _super);\n    function RefCountSubscriber(destination, connectable) {\n        _super.call(this, destination);\n        this.connectable = connectable;\n    }\n    /** @deprecated internal use only */ RefCountSubscriber.prototype._unsubscribe = function () {\n        var connectable = this.connectable;\n        if (!connectable) {\n            this.connection = null;\n            return;\n        }\n        this.connectable = null;\n        var refCount = connectable._refCount;\n        if (refCount <= 0) {\n            this.connection = null;\n            return;\n        }\n        connectable._refCount = refCount - 1;\n        if (refCount > 1) {\n            this.connection = null;\n            return;\n        }\n        ///\n        // Compare the local RefCountSubscriber's connection Subscription to the\n        // connection Subscription on the shared ConnectableObservable. In cases\n        // where the ConnectableObservable source synchronously emits values, and\n        // the RefCountSubscriber's downstream Observers synchronously unsubscribe,\n        // execution continues to here before the RefCountOperator has a chance to\n        // supply the RefCountSubscriber with the shared connection Subscription.\n        // For example:\n        // ```\n        // Observable.range(0, 10)\n        //   .publish()\n        //   .refCount()\n        //   .take(5)\n        //   .subscribe();\n        // ```\n        // In order to account for this case, RefCountSubscriber should only dispose\n        // the ConnectableObservable's shared connection Subscription if the\n        // connection Subscription exists, *and* either:\n        //   a. RefCountSubscriber doesn't have a reference to the shared connection\n        //      Subscription yet, or,\n        //   b. RefCountSubscriber's connection Subscription reference is identical\n        //      to the shared connection Subscription\n        ///\n        var connection = this.connection;\n        var sharedConnection = connectable._connection;\n        this.connection = null;\n        if (sharedConnection && (!connection || sharedConnection === connection)) {\n            sharedConnection.unsubscribe();\n        }\n    };\n    return RefCountSubscriber;\n}(Subscriber_1.Subscriber));\n"],"mappings":"AAAA;;AACA,IAAIA,SAAS,GAAI,QAAQ,KAAKA,SAAd,IAA4B,UAAUC,CAAV,EAAaC,CAAb,EAAgB;EACxD,KAAK,IAAIC,CAAT,IAAcD,CAAd,EAAiB,IAAIA,CAAC,CAACE,cAAF,CAAiBD,CAAjB,CAAJ,EAAyBF,CAAC,CAACE,CAAD,CAAD,GAAOD,CAAC,CAACC,CAAD,CAAR;;EAC1C,SAASE,EAAT,GAAc;IAAE,KAAKC,WAAL,GAAmBL,CAAnB;EAAuB;;EACvCA,CAAC,CAACM,SAAF,GAAcL,CAAC,KAAK,IAAN,GAAaM,MAAM,CAACC,MAAP,CAAcP,CAAd,CAAb,IAAiCG,EAAE,CAACE,SAAH,GAAeL,CAAC,CAACK,SAAjB,EAA4B,IAAIF,EAAJ,EAA7D,CAAd;AACH,CAJD;;AAKA,IAAIK,SAAS,GAAGC,OAAO,CAAC,YAAD,CAAvB;;AACA,IAAIC,YAAY,GAAGD,OAAO,CAAC,eAAD,CAA1B;;AACA,IAAIE,YAAY,GAAGF,OAAO,CAAC,eAAD,CAA1B;;AACA,IAAIG,cAAc,GAAGH,OAAO,CAAC,iBAAD,CAA5B;;AACA,IAAII,UAAU,GAAGJ,OAAO,CAAC,uBAAD,CAAxB;AACA;AACA;AACA;;;AACA,IAAIK,qBAAqB,GAAI,UAAUC,MAAV,EAAkB;EAC3CjB,SAAS,CAACgB,qBAAD,EAAwBC,MAAxB,CAAT;;EACA,SAASD,qBAAT;EAA+B;EAAqCE,MAApE;EACI;EAAqCC,cADzC,EACyD;IACrDF,MAAM,CAACG,IAAP,CAAY,IAAZ;;IACA,KAAKF,MAAL,GAAcA,MAAd;IACA,KAAKC,cAAL,GAAsBA,cAAtB;IACA;;IAAqC,KAAKE,SAAL,GAAiB,CAAjB;IACrC,KAAKC,WAAL,GAAmB,KAAnB;EACH;EACD;;;EAAqCN,qBAAqB,CAACT,SAAtB,CAAgCgB,UAAhC,GAA6C,UAAUC,UAAV,EAAsB;IACpG,OAAO,KAAKC,UAAL,GAAkBC,SAAlB,CAA4BF,UAA5B,CAAP;EACH,CAFoC;EAGrC;;;EAAqCR,qBAAqB,CAACT,SAAtB,CAAgCkB,UAAhC,GAA6C,YAAY;IAC1F,IAAIE,OAAO,GAAG,KAAKC,QAAnB;;IACA,IAAI,CAACD,OAAD,IAAYA,OAAO,CAACE,SAAxB,EAAmC;MAC/B,KAAKD,QAAL,GAAgB,KAAKT,cAAL,EAAhB;IACH;;IACD,OAAO,KAAKS,QAAZ;EACH,CANoC;;EAOrCZ,qBAAqB,CAACT,SAAtB,CAAgCuB,OAAhC,GAA0C,YAAY;IAClD,IAAIC,UAAU,GAAG,KAAKC,WAAtB;;IACA,IAAI,CAACD,UAAL,EAAiB;MACb,KAAKT,WAAL,GAAmB,KAAnB;MACAS,UAAU,GAAG,KAAKC,WAAL,GAAmB,IAAIlB,cAAc,CAACmB,YAAnB,EAAhC;MACAF,UAAU,CAACG,GAAX,CAAe,KAAKhB,MAAL,CACVQ,SADU,CACA,IAAIS,qBAAJ,CAA0B,KAAKV,UAAL,EAA1B,EAA6C,IAA7C,CADA,CAAf;;MAEA,IAAIM,UAAU,CAACK,MAAf,EAAuB;QACnB,KAAKJ,WAAL,GAAmB,IAAnB;QACAD,UAAU,GAAGjB,cAAc,CAACmB,YAAf,CAA4BI,KAAzC;MACH,CAHD,MAIK;QACD,KAAKL,WAAL,GAAmBD,UAAnB;MACH;IACJ;;IACD,OAAOA,UAAP;EACH,CAhBD;;EAiBAf,qBAAqB,CAACT,SAAtB,CAAgC+B,QAAhC,GAA2C,YAAY;IACnD,OAAOvB,UAAU,CAACuB,QAAX,GAAsB,IAAtB,CAAP;EACH,CAFD;;EAGA,OAAOtB,qBAAP;AACH,CAzC4B,CAyC3BJ,YAAY,CAAC2B,UAzCc,CAA7B;;AA0CAC,OAAO,CAACxB,qBAAR,GAAgCA,qBAAhC;AACA,IAAIyB,gBAAgB,GAAGzB,qBAAqB,CAACT,SAA7C;AACAiC,OAAO,CAACE,+BAAR,GAA0C;EACtCC,QAAQ,EAAE;IAAEC,KAAK,EAAE;EAAT,CAD4B;EAEtCvB,SAAS,EAAE;IAAEuB,KAAK,EAAE,CAAT;IAAYC,QAAQ,EAAE;EAAtB,CAF2B;EAGtCjB,QAAQ,EAAE;IAAEgB,KAAK,EAAE,IAAT;IAAeC,QAAQ,EAAE;EAAzB,CAH4B;EAItCb,WAAW,EAAE;IAAEY,KAAK,EAAE,IAAT;IAAeC,QAAQ,EAAE;EAAzB,CAJyB;EAKtCtB,UAAU,EAAE;IAAEqB,KAAK,EAAEH,gBAAgB,CAAClB;EAA1B,CAL0B;EAMtCD,WAAW,EAAE;IAAEsB,KAAK,EAAEH,gBAAgB,CAACnB,WAA1B;IAAuCuB,QAAQ,EAAE;EAAjD,CANyB;EAOtCpB,UAAU,EAAE;IAAEmB,KAAK,EAAEH,gBAAgB,CAAChB;EAA1B,CAP0B;EAQtCK,OAAO,EAAE;IAAEc,KAAK,EAAEH,gBAAgB,CAACX;EAA1B,CAR6B;EAStCQ,QAAQ,EAAE;IAAEM,KAAK,EAAEH,gBAAgB,CAACH;EAA1B;AAT4B,CAA1C;;AAWA,IAAIH,qBAAqB,GAAI,UAAUlB,MAAV,EAAkB;EAC3CjB,SAAS,CAACmC,qBAAD,EAAwBlB,MAAxB,CAAT;;EACA,SAASkB,qBAAT,CAA+BW,WAA/B,EAA4CC,WAA5C,EAAyD;IACrD9B,MAAM,CAACG,IAAP,CAAY,IAAZ,EAAkB0B,WAAlB;;IACA,KAAKC,WAAL,GAAmBA,WAAnB;EACH;;EACDZ,qBAAqB,CAAC5B,SAAtB,CAAgCyC,MAAhC,GAAyC,UAAUC,GAAV,EAAe;IACpD,KAAKC,YAAL;;IACAjC,MAAM,CAACV,SAAP,CAAiByC,MAAjB,CAAwB5B,IAAxB,CAA6B,IAA7B,EAAmC6B,GAAnC;EACH,CAHD;;EAIAd,qBAAqB,CAAC5B,SAAtB,CAAgC4C,SAAhC,GAA4C,YAAY;IACpD,KAAKJ,WAAL,CAAiBzB,WAAjB,GAA+B,IAA/B;;IACA,KAAK4B,YAAL;;IACAjC,MAAM,CAACV,SAAP,CAAiB4C,SAAjB,CAA2B/B,IAA3B,CAAgC,IAAhC;EACH,CAJD;EAKA;;;EAAqCe,qBAAqB,CAAC5B,SAAtB,CAAgC2C,YAAhC,GAA+C,YAAY;IAC5F,IAAIH,WAAW,GAAG,KAAKA,WAAvB;;IACA,IAAIA,WAAJ,EAAiB;MACb,KAAKA,WAAL,GAAmB,IAAnB;MACA,IAAIhB,UAAU,GAAGgB,WAAW,CAACf,WAA7B;MACAe,WAAW,CAAC1B,SAAZ,GAAwB,CAAxB;MACA0B,WAAW,CAACnB,QAAZ,GAAuB,IAAvB;MACAmB,WAAW,CAACf,WAAZ,GAA0B,IAA1B;;MACA,IAAID,UAAJ,EAAgB;QACZA,UAAU,CAACqB,WAAX;MACH;IACJ;EACJ,CAZoC;;EAarC,OAAOjB,qBAAP;AACH,CA7B4B,CA6B3BzB,SAAS,CAAC2C,iBA7BiB,CAA7B;;AA8BA,IAAIC,gBAAgB,GAAI,YAAY;EAChC,SAASA,gBAAT,CAA0BP,WAA1B,EAAuC;IACnC,KAAKA,WAAL,GAAmBA,WAAnB;EACH;;EACDO,gBAAgB,CAAC/C,SAAjB,CAA2Ba,IAA3B,GAAkC,UAAUI,UAAV,EAAsBN,MAAtB,EAA8B;IAC5D,IAAI6B,WAAW,GAAG,KAAKA,WAAvB;IACAA,WAAW,CAAC1B,SAAZ;IACA,IAAIkC,UAAU,GAAG,IAAIC,kBAAJ,CAAuBhC,UAAvB,EAAmCuB,WAAnC,CAAjB;IACA,IAAIU,YAAY,GAAGvC,MAAM,CAACQ,SAAP,CAAiB6B,UAAjB,CAAnB;;IACA,IAAI,CAACA,UAAU,CAACnB,MAAhB,EAAwB;MACpBmB,UAAU,CAACxB,UAAX,GAAwBgB,WAAW,CAACjB,OAAZ,EAAxB;IACH;;IACD,OAAO2B,YAAP;EACH,CATD;;EAUA,OAAOH,gBAAP;AACH,CAfuB,EAAxB;;AAgBA,IAAIE,kBAAkB,GAAI,UAAUvC,MAAV,EAAkB;EACxCjB,SAAS,CAACwD,kBAAD,EAAqBvC,MAArB,CAAT;;EACA,SAASuC,kBAAT,CAA4BV,WAA5B,EAAyCC,WAAzC,EAAsD;IAClD9B,MAAM,CAACG,IAAP,CAAY,IAAZ,EAAkB0B,WAAlB;;IACA,KAAKC,WAAL,GAAmBA,WAAnB;EACH;EACD;;;EAAqCS,kBAAkB,CAACjD,SAAnB,CAA6B2C,YAA7B,GAA4C,YAAY;IACzF,IAAIH,WAAW,GAAG,KAAKA,WAAvB;;IACA,IAAI,CAACA,WAAL,EAAkB;MACd,KAAKhB,UAAL,GAAkB,IAAlB;MACA;IACH;;IACD,KAAKgB,WAAL,GAAmB,IAAnB;IACA,IAAIT,QAAQ,GAAGS,WAAW,CAAC1B,SAA3B;;IACA,IAAIiB,QAAQ,IAAI,CAAhB,EAAmB;MACf,KAAKP,UAAL,GAAkB,IAAlB;MACA;IACH;;IACDgB,WAAW,CAAC1B,SAAZ,GAAwBiB,QAAQ,GAAG,CAAnC;;IACA,IAAIA,QAAQ,GAAG,CAAf,EAAkB;MACd,KAAKP,UAAL,GAAkB,IAAlB;MACA;IACH,CAhBwF,CAiBzF;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;;;IACA,IAAIA,UAAU,GAAG,KAAKA,UAAtB;IACA,IAAI2B,gBAAgB,GAAGX,WAAW,CAACf,WAAnC;IACA,KAAKD,UAAL,GAAkB,IAAlB;;IACA,IAAI2B,gBAAgB,KAAK,CAAC3B,UAAD,IAAe2B,gBAAgB,KAAK3B,UAAzC,CAApB,EAA0E;MACtE2B,gBAAgB,CAACN,WAAjB;IACH;EACJ,CA9CoC;;EA+CrC,OAAOI,kBAAP;AACH,CAtDyB,CAsDxB3C,YAAY,CAAC8C,UAtDW,CAA1B"},"metadata":{},"sourceType":"script"}
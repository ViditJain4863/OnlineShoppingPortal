{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function (d, b) {\n  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\n  function __() {\n    this.constructor = d;\n  }\n\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n\nvar isNumeric_1 = require('../util/isNumeric');\n\nvar Observable_1 = require('../Observable');\n\nvar async_1 = require('../scheduler/async');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\n\n\nvar IntervalObservable = function (_super) {\n  __extends(IntervalObservable, _super);\n\n  function IntervalObservable(period, scheduler) {\n    if (period === void 0) {\n      period = 0;\n    }\n\n    if (scheduler === void 0) {\n      scheduler = async_1.async;\n    }\n\n    _super.call(this);\n\n    this.period = period;\n    this.scheduler = scheduler;\n\n    if (!isNumeric_1.isNumeric(period) || period < 0) {\n      this.period = 0;\n    }\n\n    if (!scheduler || typeof scheduler.schedule !== 'function') {\n      this.scheduler = async_1.async;\n    }\n  }\n  /**\n   * Creates an Observable that emits sequential numbers every specified\n   * interval of time, on a specified IScheduler.\n   *\n   * <span class=\"informal\">Emits incremental numbers periodically in time.\n   * </span>\n   *\n   * <img src=\"./img/interval.png\" width=\"100%\">\n   *\n   * `interval` returns an Observable that emits an infinite sequence of\n   * ascending integers, with a constant interval of time of your choosing\n   * between those emissions. The first emission is not sent immediately, but\n   * only after the first period has passed. By default, this operator uses the\n   * `async` IScheduler to provide a notion of time, but you may pass any\n   * IScheduler to it.\n   *\n   * @example <caption>Emits ascending numbers, one every second (1000ms)</caption>\n   * var numbers = Rx.Observable.interval(1000);\n   * numbers.subscribe(x => console.log(x));\n   *\n   * @see {@link timer}\n   * @see {@link delay}\n   *\n   * @param {number} [period=0] The interval size in milliseconds (by default)\n   * or the time unit determined by the scheduler's clock.\n   * @param {Scheduler} [scheduler=async] The IScheduler to use for scheduling\n   * the emission of values, and providing a notion of \"time\".\n   * @return {Observable} An Observable that emits a sequential number each time\n   * interval.\n   * @static true\n   * @name interval\n   * @owner Observable\n   */\n\n\n  IntervalObservable.create = function (period, scheduler) {\n    if (period === void 0) {\n      period = 0;\n    }\n\n    if (scheduler === void 0) {\n      scheduler = async_1.async;\n    }\n\n    return new IntervalObservable(period, scheduler);\n  };\n\n  IntervalObservable.dispatch = function (state) {\n    var index = state.index,\n        subscriber = state.subscriber,\n        period = state.period;\n    subscriber.next(index);\n\n    if (subscriber.closed) {\n      return;\n    }\n\n    state.index += 1;\n    this.schedule(state, period);\n  };\n  /** @deprecated internal use only */\n\n\n  IntervalObservable.prototype._subscribe = function (subscriber) {\n    var index = 0;\n    var period = this.period;\n    var scheduler = this.scheduler;\n    subscriber.add(scheduler.schedule(IntervalObservable.dispatch, period, {\n      index: index,\n      subscriber: subscriber,\n      period: period\n    }));\n  };\n\n  return IntervalObservable;\n}(Observable_1.Observable);\n\nexports.IntervalObservable = IntervalObservable;","map":{"version":3,"names":["__extends","d","b","p","hasOwnProperty","__","constructor","prototype","Object","create","isNumeric_1","require","Observable_1","async_1","IntervalObservable","_super","period","scheduler","async","call","isNumeric","schedule","dispatch","state","index","subscriber","next","closed","_subscribe","add","Observable","exports"],"sources":["C:/Users/vidit.jain/node_modules/rxjs/observable/IntervalObservable.js"],"sourcesContent":["\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar isNumeric_1 = require('../util/isNumeric');\nvar Observable_1 = require('../Observable');\nvar async_1 = require('../scheduler/async');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar IntervalObservable = (function (_super) {\n    __extends(IntervalObservable, _super);\n    function IntervalObservable(period, scheduler) {\n        if (period === void 0) { period = 0; }\n        if (scheduler === void 0) { scheduler = async_1.async; }\n        _super.call(this);\n        this.period = period;\n        this.scheduler = scheduler;\n        if (!isNumeric_1.isNumeric(period) || period < 0) {\n            this.period = 0;\n        }\n        if (!scheduler || typeof scheduler.schedule !== 'function') {\n            this.scheduler = async_1.async;\n        }\n    }\n    /**\n     * Creates an Observable that emits sequential numbers every specified\n     * interval of time, on a specified IScheduler.\n     *\n     * <span class=\"informal\">Emits incremental numbers periodically in time.\n     * </span>\n     *\n     * <img src=\"./img/interval.png\" width=\"100%\">\n     *\n     * `interval` returns an Observable that emits an infinite sequence of\n     * ascending integers, with a constant interval of time of your choosing\n     * between those emissions. The first emission is not sent immediately, but\n     * only after the first period has passed. By default, this operator uses the\n     * `async` IScheduler to provide a notion of time, but you may pass any\n     * IScheduler to it.\n     *\n     * @example <caption>Emits ascending numbers, one every second (1000ms)</caption>\n     * var numbers = Rx.Observable.interval(1000);\n     * numbers.subscribe(x => console.log(x));\n     *\n     * @see {@link timer}\n     * @see {@link delay}\n     *\n     * @param {number} [period=0] The interval size in milliseconds (by default)\n     * or the time unit determined by the scheduler's clock.\n     * @param {Scheduler} [scheduler=async] The IScheduler to use for scheduling\n     * the emission of values, and providing a notion of \"time\".\n     * @return {Observable} An Observable that emits a sequential number each time\n     * interval.\n     * @static true\n     * @name interval\n     * @owner Observable\n     */\n    IntervalObservable.create = function (period, scheduler) {\n        if (period === void 0) { period = 0; }\n        if (scheduler === void 0) { scheduler = async_1.async; }\n        return new IntervalObservable(period, scheduler);\n    };\n    IntervalObservable.dispatch = function (state) {\n        var index = state.index, subscriber = state.subscriber, period = state.period;\n        subscriber.next(index);\n        if (subscriber.closed) {\n            return;\n        }\n        state.index += 1;\n        this.schedule(state, period);\n    };\n    /** @deprecated internal use only */ IntervalObservable.prototype._subscribe = function (subscriber) {\n        var index = 0;\n        var period = this.period;\n        var scheduler = this.scheduler;\n        subscriber.add(scheduler.schedule(IntervalObservable.dispatch, period, {\n            index: index, subscriber: subscriber, period: period\n        }));\n    };\n    return IntervalObservable;\n}(Observable_1.Observable));\nexports.IntervalObservable = IntervalObservable;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}
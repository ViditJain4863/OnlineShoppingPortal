{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function (d, b) {\n  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\n  function __() {\n    this.constructor = d;\n  }\n\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n\nvar Subscriber_1 = require('../Subscriber');\n\nvar ArgumentOutOfRangeError_1 = require('../util/ArgumentOutOfRangeError');\n\nvar EmptyObservable_1 = require('../observable/EmptyObservable');\n/**\n * Emits only the last `count` values emitted by the source Observable.\n *\n * <span class=\"informal\">Remembers the latest `count` values, then emits those\n * only when the source completes.</span>\n *\n * <img src=\"./img/takeLast.png\" width=\"100%\">\n *\n * `takeLast` returns an Observable that emits at most the last `count` values\n * emitted by the source Observable. If the source emits fewer than `count`\n * values then all of its values are emitted. This operator must wait until the\n * `complete` notification emission from the source in order to emit the `next`\n * values on the output Observable, because otherwise it is impossible to know\n * whether or not more values will be emitted on the source. For this reason,\n * all values are emitted synchronously, followed by the complete notification.\n *\n * @example <caption>Take the last 3 values of an Observable with many values</caption>\n * var many = Rx.Observable.range(1, 100);\n * var lastThree = many.takeLast(3);\n * lastThree.subscribe(x => console.log(x));\n *\n * @see {@link take}\n * @see {@link takeUntil}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @throws {ArgumentOutOfRangeError} When using `takeLast(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0`.\n *\n * @param {number} count The maximum number of values to emit from the end of\n * the sequence of values emitted by the source Observable.\n * @return {Observable<T>} An Observable that emits at most the last count\n * values emitted by the source Observable.\n * @method takeLast\n * @owner Observable\n */\n\n\nfunction takeLast(count) {\n  return function takeLastOperatorFunction(source) {\n    if (count === 0) {\n      return new EmptyObservable_1.EmptyObservable();\n    } else {\n      return source.lift(new TakeLastOperator(count));\n    }\n  };\n}\n\nexports.takeLast = takeLast;\n\nvar TakeLastOperator = function () {\n  function TakeLastOperator(total) {\n    this.total = total;\n\n    if (this.total < 0) {\n      throw new ArgumentOutOfRangeError_1.ArgumentOutOfRangeError();\n    }\n  }\n\n  TakeLastOperator.prototype.call = function (subscriber, source) {\n    return source.subscribe(new TakeLastSubscriber(subscriber, this.total));\n  };\n\n  return TakeLastOperator;\n}();\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\n\n\nvar TakeLastSubscriber = function (_super) {\n  __extends(TakeLastSubscriber, _super);\n\n  function TakeLastSubscriber(destination, total) {\n    _super.call(this, destination);\n\n    this.total = total;\n    this.ring = new Array();\n    this.count = 0;\n  }\n\n  TakeLastSubscriber.prototype._next = function (value) {\n    var ring = this.ring;\n    var total = this.total;\n    var count = this.count++;\n\n    if (ring.length < total) {\n      ring.push(value);\n    } else {\n      var index = count % total;\n      ring[index] = value;\n    }\n  };\n\n  TakeLastSubscriber.prototype._complete = function () {\n    var destination = this.destination;\n    var count = this.count;\n\n    if (count > 0) {\n      var total = this.count >= this.total ? this.total : this.count;\n      var ring = this.ring;\n\n      for (var i = 0; i < total; i++) {\n        var idx = count++ % total;\n        destination.next(ring[idx]);\n      }\n    }\n\n    destination.complete();\n  };\n\n  return TakeLastSubscriber;\n}(Subscriber_1.Subscriber);","map":{"version":3,"names":["__extends","d","b","p","hasOwnProperty","__","constructor","prototype","Object","create","Subscriber_1","require","ArgumentOutOfRangeError_1","EmptyObservable_1","takeLast","count","takeLastOperatorFunction","source","EmptyObservable","lift","TakeLastOperator","exports","total","ArgumentOutOfRangeError","call","subscriber","subscribe","TakeLastSubscriber","_super","destination","ring","Array","_next","value","length","push","index","_complete","i","idx","next","complete","Subscriber"],"sources":["C:/Users/vidit.jain/node_modules/rxjs/operators/takeLast.js"],"sourcesContent":["\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\nvar ArgumentOutOfRangeError_1 = require('../util/ArgumentOutOfRangeError');\nvar EmptyObservable_1 = require('../observable/EmptyObservable');\n/**\n * Emits only the last `count` values emitted by the source Observable.\n *\n * <span class=\"informal\">Remembers the latest `count` values, then emits those\n * only when the source completes.</span>\n *\n * <img src=\"./img/takeLast.png\" width=\"100%\">\n *\n * `takeLast` returns an Observable that emits at most the last `count` values\n * emitted by the source Observable. If the source emits fewer than `count`\n * values then all of its values are emitted. This operator must wait until the\n * `complete` notification emission from the source in order to emit the `next`\n * values on the output Observable, because otherwise it is impossible to know\n * whether or not more values will be emitted on the source. For this reason,\n * all values are emitted synchronously, followed by the complete notification.\n *\n * @example <caption>Take the last 3 values of an Observable with many values</caption>\n * var many = Rx.Observable.range(1, 100);\n * var lastThree = many.takeLast(3);\n * lastThree.subscribe(x => console.log(x));\n *\n * @see {@link take}\n * @see {@link takeUntil}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @throws {ArgumentOutOfRangeError} When using `takeLast(i)`, it delivers an\n * ArgumentOutOrRangeError to the Observer's `error` callback if `i < 0`.\n *\n * @param {number} count The maximum number of values to emit from the end of\n * the sequence of values emitted by the source Observable.\n * @return {Observable<T>} An Observable that emits at most the last count\n * values emitted by the source Observable.\n * @method takeLast\n * @owner Observable\n */\nfunction takeLast(count) {\n    return function takeLastOperatorFunction(source) {\n        if (count === 0) {\n            return new EmptyObservable_1.EmptyObservable();\n        }\n        else {\n            return source.lift(new TakeLastOperator(count));\n        }\n    };\n}\nexports.takeLast = takeLast;\nvar TakeLastOperator = (function () {\n    function TakeLastOperator(total) {\n        this.total = total;\n        if (this.total < 0) {\n            throw new ArgumentOutOfRangeError_1.ArgumentOutOfRangeError;\n        }\n    }\n    TakeLastOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new TakeLastSubscriber(subscriber, this.total));\n    };\n    return TakeLastOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar TakeLastSubscriber = (function (_super) {\n    __extends(TakeLastSubscriber, _super);\n    function TakeLastSubscriber(destination, total) {\n        _super.call(this, destination);\n        this.total = total;\n        this.ring = new Array();\n        this.count = 0;\n    }\n    TakeLastSubscriber.prototype._next = function (value) {\n        var ring = this.ring;\n        var total = this.total;\n        var count = this.count++;\n        if (ring.length < total) {\n            ring.push(value);\n        }\n        else {\n            var index = count % total;\n            ring[index] = value;\n        }\n    };\n    TakeLastSubscriber.prototype._complete = function () {\n        var destination = this.destination;\n        var count = this.count;\n        if (count > 0) {\n            var total = this.count >= this.total ? this.total : this.count;\n            var ring = this.ring;\n            for (var i = 0; i < total; i++) {\n                var idx = (count++) % total;\n                destination.next(ring[idx]);\n            }\n        }\n        destination.complete();\n    };\n    return TakeLastSubscriber;\n}(Subscriber_1.Subscriber));\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}
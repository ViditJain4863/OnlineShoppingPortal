{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function (d, b) {\n  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\n  function __() {\n    this.constructor = d;\n  }\n\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n\nvar Subscriber_1 = require('../Subscriber');\n\nvar tryCatch_1 = require('../util/tryCatch');\n\nvar errorObject_1 = require('../util/errorObject');\n/**\n * Compares all values of two observables in sequence using an optional comparor function\n * and returns an observable of a single boolean value representing whether or not the two sequences\n * are equal.\n *\n * <span class=\"informal\">Checks to see of all values emitted by both observables are equal, in order.</span>\n *\n * <img src=\"./img/sequenceEqual.png\" width=\"100%\">\n *\n * `sequenceEqual` subscribes to two observables and buffers incoming values from each observable. Whenever either\n * observable emits a value, the value is buffered and the buffers are shifted and compared from the bottom\n * up; If any value pair doesn't match, the returned observable will emit `false` and complete. If one of the\n * observables completes, the operator will wait for the other observable to complete; If the other\n * observable emits before completing, the returned observable will emit `false` and complete. If one observable never\n * completes or emits after the other complets, the returned observable will never complete.\n *\n * @example <caption>figure out if the Konami code matches</caption>\n * var code = Rx.Observable.from([\n *  \"ArrowUp\",\n *  \"ArrowUp\",\n *  \"ArrowDown\",\n *  \"ArrowDown\",\n *  \"ArrowLeft\",\n *  \"ArrowRight\",\n *  \"ArrowLeft\",\n *  \"ArrowRight\",\n *  \"KeyB\",\n *  \"KeyA\",\n *  \"Enter\" // no start key, clearly.\n * ]);\n *\n * var keys = Rx.Observable.fromEvent(document, 'keyup')\n *  .map(e => e.code);\n * var matches = keys.bufferCount(11, 1)\n *  .mergeMap(\n *    last11 =>\n *      Rx.Observable.from(last11)\n *        .sequenceEqual(code)\n *   );\n * matches.subscribe(matched => console.log('Successful cheat at Contra? ', matched));\n *\n * @see {@link combineLatest}\n * @see {@link zip}\n * @see {@link withLatestFrom}\n *\n * @param {Observable} compareTo The observable sequence to compare the source sequence to.\n * @param {function} [comparor] An optional function to compare each value pair\n * @return {Observable} An Observable of a single boolean value representing whether or not\n * the values emitted by both observables were equal in sequence.\n * @method sequenceEqual\n * @owner Observable\n */\n\n\nfunction sequenceEqual(compareTo, comparor) {\n  return function (source) {\n    return source.lift(new SequenceEqualOperator(compareTo, comparor));\n  };\n}\n\nexports.sequenceEqual = sequenceEqual;\n\nvar SequenceEqualOperator = function () {\n  function SequenceEqualOperator(compareTo, comparor) {\n    this.compareTo = compareTo;\n    this.comparor = comparor;\n  }\n\n  SequenceEqualOperator.prototype.call = function (subscriber, source) {\n    return source.subscribe(new SequenceEqualSubscriber(subscriber, this.compareTo, this.comparor));\n  };\n\n  return SequenceEqualOperator;\n}();\n\nexports.SequenceEqualOperator = SequenceEqualOperator;\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\n\nvar SequenceEqualSubscriber = function (_super) {\n  __extends(SequenceEqualSubscriber, _super);\n\n  function SequenceEqualSubscriber(destination, compareTo, comparor) {\n    _super.call(this, destination);\n\n    this.compareTo = compareTo;\n    this.comparor = comparor;\n    this._a = [];\n    this._b = [];\n    this._oneComplete = false;\n    this.add(compareTo.subscribe(new SequenceEqualCompareToSubscriber(destination, this)));\n  }\n\n  SequenceEqualSubscriber.prototype._next = function (value) {\n    if (this._oneComplete && this._b.length === 0) {\n      this.emit(false);\n    } else {\n      this._a.push(value);\n\n      this.checkValues();\n    }\n  };\n\n  SequenceEqualSubscriber.prototype._complete = function () {\n    if (this._oneComplete) {\n      this.emit(this._a.length === 0 && this._b.length === 0);\n    } else {\n      this._oneComplete = true;\n    }\n  };\n\n  SequenceEqualSubscriber.prototype.checkValues = function () {\n    var _c = this,\n        _a = _c._a,\n        _b = _c._b,\n        comparor = _c.comparor;\n\n    while (_a.length > 0 && _b.length > 0) {\n      var a = _a.shift();\n\n      var b = _b.shift();\n\n      var areEqual = false;\n\n      if (comparor) {\n        areEqual = tryCatch_1.tryCatch(comparor)(a, b);\n\n        if (areEqual === errorObject_1.errorObject) {\n          this.destination.error(errorObject_1.errorObject.e);\n        }\n      } else {\n        areEqual = a === b;\n      }\n\n      if (!areEqual) {\n        this.emit(false);\n      }\n    }\n  };\n\n  SequenceEqualSubscriber.prototype.emit = function (value) {\n    var destination = this.destination;\n    destination.next(value);\n    destination.complete();\n  };\n\n  SequenceEqualSubscriber.prototype.nextB = function (value) {\n    if (this._oneComplete && this._a.length === 0) {\n      this.emit(false);\n    } else {\n      this._b.push(value);\n\n      this.checkValues();\n    }\n  };\n\n  return SequenceEqualSubscriber;\n}(Subscriber_1.Subscriber);\n\nexports.SequenceEqualSubscriber = SequenceEqualSubscriber;\n\nvar SequenceEqualCompareToSubscriber = function (_super) {\n  __extends(SequenceEqualCompareToSubscriber, _super);\n\n  function SequenceEqualCompareToSubscriber(destination, parent) {\n    _super.call(this, destination);\n\n    this.parent = parent;\n  }\n\n  SequenceEqualCompareToSubscriber.prototype._next = function (value) {\n    this.parent.nextB(value);\n  };\n\n  SequenceEqualCompareToSubscriber.prototype._error = function (err) {\n    this.parent.error(err);\n  };\n\n  SequenceEqualCompareToSubscriber.prototype._complete = function () {\n    this.parent._complete();\n  };\n\n  return SequenceEqualCompareToSubscriber;\n}(Subscriber_1.Subscriber);","map":{"version":3,"names":["__extends","d","b","p","hasOwnProperty","__","constructor","prototype","Object","create","Subscriber_1","require","tryCatch_1","errorObject_1","sequenceEqual","compareTo","comparor","source","lift","SequenceEqualOperator","exports","call","subscriber","subscribe","SequenceEqualSubscriber","_super","destination","_a","_b","_oneComplete","add","SequenceEqualCompareToSubscriber","_next","value","length","emit","push","checkValues","_complete","_c","a","shift","areEqual","tryCatch","errorObject","error","e","next","complete","nextB","Subscriber","parent","_error","err"],"sources":["C:/Users/vidit.jain/node_modules/rxjs/operators/sequenceEqual.js"],"sourcesContent":["\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\nvar tryCatch_1 = require('../util/tryCatch');\nvar errorObject_1 = require('../util/errorObject');\n/**\n * Compares all values of two observables in sequence using an optional comparor function\n * and returns an observable of a single boolean value representing whether or not the two sequences\n * are equal.\n *\n * <span class=\"informal\">Checks to see of all values emitted by both observables are equal, in order.</span>\n *\n * <img src=\"./img/sequenceEqual.png\" width=\"100%\">\n *\n * `sequenceEqual` subscribes to two observables and buffers incoming values from each observable. Whenever either\n * observable emits a value, the value is buffered and the buffers are shifted and compared from the bottom\n * up; If any value pair doesn't match, the returned observable will emit `false` and complete. If one of the\n * observables completes, the operator will wait for the other observable to complete; If the other\n * observable emits before completing, the returned observable will emit `false` and complete. If one observable never\n * completes or emits after the other complets, the returned observable will never complete.\n *\n * @example <caption>figure out if the Konami code matches</caption>\n * var code = Rx.Observable.from([\n *  \"ArrowUp\",\n *  \"ArrowUp\",\n *  \"ArrowDown\",\n *  \"ArrowDown\",\n *  \"ArrowLeft\",\n *  \"ArrowRight\",\n *  \"ArrowLeft\",\n *  \"ArrowRight\",\n *  \"KeyB\",\n *  \"KeyA\",\n *  \"Enter\" // no start key, clearly.\n * ]);\n *\n * var keys = Rx.Observable.fromEvent(document, 'keyup')\n *  .map(e => e.code);\n * var matches = keys.bufferCount(11, 1)\n *  .mergeMap(\n *    last11 =>\n *      Rx.Observable.from(last11)\n *        .sequenceEqual(code)\n *   );\n * matches.subscribe(matched => console.log('Successful cheat at Contra? ', matched));\n *\n * @see {@link combineLatest}\n * @see {@link zip}\n * @see {@link withLatestFrom}\n *\n * @param {Observable} compareTo The observable sequence to compare the source sequence to.\n * @param {function} [comparor] An optional function to compare each value pair\n * @return {Observable} An Observable of a single boolean value representing whether or not\n * the values emitted by both observables were equal in sequence.\n * @method sequenceEqual\n * @owner Observable\n */\nfunction sequenceEqual(compareTo, comparor) {\n    return function (source) { return source.lift(new SequenceEqualOperator(compareTo, comparor)); };\n}\nexports.sequenceEqual = sequenceEqual;\nvar SequenceEqualOperator = (function () {\n    function SequenceEqualOperator(compareTo, comparor) {\n        this.compareTo = compareTo;\n        this.comparor = comparor;\n    }\n    SequenceEqualOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new SequenceEqualSubscriber(subscriber, this.compareTo, this.comparor));\n    };\n    return SequenceEqualOperator;\n}());\nexports.SequenceEqualOperator = SequenceEqualOperator;\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SequenceEqualSubscriber = (function (_super) {\n    __extends(SequenceEqualSubscriber, _super);\n    function SequenceEqualSubscriber(destination, compareTo, comparor) {\n        _super.call(this, destination);\n        this.compareTo = compareTo;\n        this.comparor = comparor;\n        this._a = [];\n        this._b = [];\n        this._oneComplete = false;\n        this.add(compareTo.subscribe(new SequenceEqualCompareToSubscriber(destination, this)));\n    }\n    SequenceEqualSubscriber.prototype._next = function (value) {\n        if (this._oneComplete && this._b.length === 0) {\n            this.emit(false);\n        }\n        else {\n            this._a.push(value);\n            this.checkValues();\n        }\n    };\n    SequenceEqualSubscriber.prototype._complete = function () {\n        if (this._oneComplete) {\n            this.emit(this._a.length === 0 && this._b.length === 0);\n        }\n        else {\n            this._oneComplete = true;\n        }\n    };\n    SequenceEqualSubscriber.prototype.checkValues = function () {\n        var _c = this, _a = _c._a, _b = _c._b, comparor = _c.comparor;\n        while (_a.length > 0 && _b.length > 0) {\n            var a = _a.shift();\n            var b = _b.shift();\n            var areEqual = false;\n            if (comparor) {\n                areEqual = tryCatch_1.tryCatch(comparor)(a, b);\n                if (areEqual === errorObject_1.errorObject) {\n                    this.destination.error(errorObject_1.errorObject.e);\n                }\n            }\n            else {\n                areEqual = a === b;\n            }\n            if (!areEqual) {\n                this.emit(false);\n            }\n        }\n    };\n    SequenceEqualSubscriber.prototype.emit = function (value) {\n        var destination = this.destination;\n        destination.next(value);\n        destination.complete();\n    };\n    SequenceEqualSubscriber.prototype.nextB = function (value) {\n        if (this._oneComplete && this._a.length === 0) {\n            this.emit(false);\n        }\n        else {\n            this._b.push(value);\n            this.checkValues();\n        }\n    };\n    return SequenceEqualSubscriber;\n}(Subscriber_1.Subscriber));\nexports.SequenceEqualSubscriber = SequenceEqualSubscriber;\nvar SequenceEqualCompareToSubscriber = (function (_super) {\n    __extends(SequenceEqualCompareToSubscriber, _super);\n    function SequenceEqualCompareToSubscriber(destination, parent) {\n        _super.call(this, destination);\n        this.parent = parent;\n    }\n    SequenceEqualCompareToSubscriber.prototype._next = function (value) {\n        this.parent.nextB(value);\n    };\n    SequenceEqualCompareToSubscriber.prototype._error = function (err) {\n        this.parent.error(err);\n    };\n    SequenceEqualCompareToSubscriber.prototype._complete = function () {\n        this.parent._complete();\n    };\n    return SequenceEqualCompareToSubscriber;\n}(Subscriber_1.Subscriber));\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}
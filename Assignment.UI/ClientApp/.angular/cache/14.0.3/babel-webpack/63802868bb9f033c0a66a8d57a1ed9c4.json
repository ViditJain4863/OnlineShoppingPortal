{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function (d, b) {\n  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\n  function __() {\n    this.constructor = d;\n  }\n\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n\nvar Subscriber_1 = require('../Subscriber');\n\nfunction refCount() {\n  return function refCountOperatorFunction(source) {\n    return source.lift(new RefCountOperator(source));\n  };\n}\n\nexports.refCount = refCount;\n\nvar RefCountOperator = function () {\n  function RefCountOperator(connectable) {\n    this.connectable = connectable;\n  }\n\n  RefCountOperator.prototype.call = function (subscriber, source) {\n    var connectable = this.connectable;\n    connectable._refCount++;\n    var refCounter = new RefCountSubscriber(subscriber, connectable);\n    var subscription = source.subscribe(refCounter);\n\n    if (!refCounter.closed) {\n      refCounter.connection = connectable.connect();\n    }\n\n    return subscription;\n  };\n\n  return RefCountOperator;\n}();\n\nvar RefCountSubscriber = function (_super) {\n  __extends(RefCountSubscriber, _super);\n\n  function RefCountSubscriber(destination, connectable) {\n    _super.call(this, destination);\n\n    this.connectable = connectable;\n  }\n  /** @deprecated internal use only */\n\n\n  RefCountSubscriber.prototype._unsubscribe = function () {\n    var connectable = this.connectable;\n\n    if (!connectable) {\n      this.connection = null;\n      return;\n    }\n\n    this.connectable = null;\n    var refCount = connectable._refCount;\n\n    if (refCount <= 0) {\n      this.connection = null;\n      return;\n    }\n\n    connectable._refCount = refCount - 1;\n\n    if (refCount > 1) {\n      this.connection = null;\n      return;\n    } ///\n    // Compare the local RefCountSubscriber's connection Subscription to the\n    // connection Subscription on the shared ConnectableObservable. In cases\n    // where the ConnectableObservable source synchronously emits values, and\n    // the RefCountSubscriber's downstream Observers synchronously unsubscribe,\n    // execution continues to here before the RefCountOperator has a chance to\n    // supply the RefCountSubscriber with the shared connection Subscription.\n    // For example:\n    // ```\n    // Observable.range(0, 10)\n    //   .publish()\n    //   .refCount()\n    //   .take(5)\n    //   .subscribe();\n    // ```\n    // In order to account for this case, RefCountSubscriber should only dispose\n    // the ConnectableObservable's shared connection Subscription if the\n    // connection Subscription exists, *and* either:\n    //   a. RefCountSubscriber doesn't have a reference to the shared connection\n    //      Subscription yet, or,\n    //   b. RefCountSubscriber's connection Subscription reference is identical\n    //      to the shared connection Subscription\n    ///\n\n\n    var connection = this.connection;\n    var sharedConnection = connectable._connection;\n    this.connection = null;\n\n    if (sharedConnection && (!connection || sharedConnection === connection)) {\n      sharedConnection.unsubscribe();\n    }\n  };\n\n  return RefCountSubscriber;\n}(Subscriber_1.Subscriber);","map":{"version":3,"names":["__extends","d","b","p","hasOwnProperty","__","constructor","prototype","Object","create","Subscriber_1","require","refCount","refCountOperatorFunction","source","lift","RefCountOperator","exports","connectable","call","subscriber","_refCount","refCounter","RefCountSubscriber","subscription","subscribe","closed","connection","connect","_super","destination","_unsubscribe","sharedConnection","_connection","unsubscribe","Subscriber"],"sources":["C:/Users/vidit.jain/node_modules/rxjs/operators/refCount.js"],"sourcesContent":["\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\nfunction refCount() {\n    return function refCountOperatorFunction(source) {\n        return source.lift(new RefCountOperator(source));\n    };\n}\nexports.refCount = refCount;\nvar RefCountOperator = (function () {\n    function RefCountOperator(connectable) {\n        this.connectable = connectable;\n    }\n    RefCountOperator.prototype.call = function (subscriber, source) {\n        var connectable = this.connectable;\n        connectable._refCount++;\n        var refCounter = new RefCountSubscriber(subscriber, connectable);\n        var subscription = source.subscribe(refCounter);\n        if (!refCounter.closed) {\n            refCounter.connection = connectable.connect();\n        }\n        return subscription;\n    };\n    return RefCountOperator;\n}());\nvar RefCountSubscriber = (function (_super) {\n    __extends(RefCountSubscriber, _super);\n    function RefCountSubscriber(destination, connectable) {\n        _super.call(this, destination);\n        this.connectable = connectable;\n    }\n    /** @deprecated internal use only */ RefCountSubscriber.prototype._unsubscribe = function () {\n        var connectable = this.connectable;\n        if (!connectable) {\n            this.connection = null;\n            return;\n        }\n        this.connectable = null;\n        var refCount = connectable._refCount;\n        if (refCount <= 0) {\n            this.connection = null;\n            return;\n        }\n        connectable._refCount = refCount - 1;\n        if (refCount > 1) {\n            this.connection = null;\n            return;\n        }\n        ///\n        // Compare the local RefCountSubscriber's connection Subscription to the\n        // connection Subscription on the shared ConnectableObservable. In cases\n        // where the ConnectableObservable source synchronously emits values, and\n        // the RefCountSubscriber's downstream Observers synchronously unsubscribe,\n        // execution continues to here before the RefCountOperator has a chance to\n        // supply the RefCountSubscriber with the shared connection Subscription.\n        // For example:\n        // ```\n        // Observable.range(0, 10)\n        //   .publish()\n        //   .refCount()\n        //   .take(5)\n        //   .subscribe();\n        // ```\n        // In order to account for this case, RefCountSubscriber should only dispose\n        // the ConnectableObservable's shared connection Subscription if the\n        // connection Subscription exists, *and* either:\n        //   a. RefCountSubscriber doesn't have a reference to the shared connection\n        //      Subscription yet, or,\n        //   b. RefCountSubscriber's connection Subscription reference is identical\n        //      to the shared connection Subscription\n        ///\n        var connection = this.connection;\n        var sharedConnection = connectable._connection;\n        this.connection = null;\n        if (sharedConnection && (!connection || sharedConnection === connection)) {\n            sharedConnection.unsubscribe();\n        }\n    };\n    return RefCountSubscriber;\n}(Subscriber_1.Subscriber));\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}
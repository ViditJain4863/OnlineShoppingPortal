{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function (d, b) {\n  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\n  function __() {\n    this.constructor = d;\n  }\n\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n\nvar Subscriber_1 = require('../Subscriber');\n/* tslint:enable:max-line-length */\n\n/**\n * Applies an accumulator function over the source Observable, and returns each\n * intermediate result, with an optional seed value.\n *\n * <span class=\"informal\">It's like {@link reduce}, but emits the current\n * accumulation whenever the source emits a value.</span>\n *\n * <img src=\"./img/scan.png\" width=\"100%\">\n *\n * Combines together all values emitted on the source, using an accumulator\n * function that knows how to join a new source value into the accumulation from\n * the past. Is similar to {@link reduce}, but emits the intermediate\n * accumulations.\n *\n * Returns an Observable that applies a specified `accumulator` function to each\n * item emitted by the source Observable. If a `seed` value is specified, then\n * that value will be used as the initial value for the accumulator. If no seed\n * value is specified, the first item of the source is used as the seed.\n *\n * @example <caption>Count the number of click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var ones = clicks.mapTo(1);\n * var seed = 0;\n * var count = ones.scan((acc, one) => acc + one, seed);\n * count.subscribe(x => console.log(x));\n *\n * @see {@link expand}\n * @see {@link mergeScan}\n * @see {@link reduce}\n *\n * @param {function(acc: R, value: T, index: number): R} accumulator\n * The accumulator function called on each source value.\n * @param {T|R} [seed] The initial accumulation value.\n * @return {Observable<R>} An observable of the accumulated values.\n * @method scan\n * @owner Observable\n */\n\n\nfunction scan(accumulator, seed) {\n  var hasSeed = false; // providing a seed of `undefined` *should* be valid and trigger\n  // hasSeed! so don't use `seed !== undefined` checks!\n  // For this reason, we have to check it here at the original call site\n  // otherwise inside Operator/Subscriber we won't know if `undefined`\n  // means they didn't provide anything or if they literally provided `undefined`\n\n  if (arguments.length >= 2) {\n    hasSeed = true;\n  }\n\n  return function scanOperatorFunction(source) {\n    return source.lift(new ScanOperator(accumulator, seed, hasSeed));\n  };\n}\n\nexports.scan = scan;\n\nvar ScanOperator = function () {\n  function ScanOperator(accumulator, seed, hasSeed) {\n    if (hasSeed === void 0) {\n      hasSeed = false;\n    }\n\n    this.accumulator = accumulator;\n    this.seed = seed;\n    this.hasSeed = hasSeed;\n  }\n\n  ScanOperator.prototype.call = function (subscriber, source) {\n    return source.subscribe(new ScanSubscriber(subscriber, this.accumulator, this.seed, this.hasSeed));\n  };\n\n  return ScanOperator;\n}();\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\n\n\nvar ScanSubscriber = function (_super) {\n  __extends(ScanSubscriber, _super);\n\n  function ScanSubscriber(destination, accumulator, _seed, hasSeed) {\n    _super.call(this, destination);\n\n    this.accumulator = accumulator;\n    this._seed = _seed;\n    this.hasSeed = hasSeed;\n    this.index = 0;\n  }\n\n  Object.defineProperty(ScanSubscriber.prototype, \"seed\", {\n    get: function () {\n      return this._seed;\n    },\n    set: function (value) {\n      this.hasSeed = true;\n      this._seed = value;\n    },\n    enumerable: true,\n    configurable: true\n  });\n\n  ScanSubscriber.prototype._next = function (value) {\n    if (!this.hasSeed) {\n      this.seed = value;\n      this.destination.next(value);\n    } else {\n      return this._tryNext(value);\n    }\n  };\n\n  ScanSubscriber.prototype._tryNext = function (value) {\n    var index = this.index++;\n    var result;\n\n    try {\n      result = this.accumulator(this.seed, value, index);\n    } catch (err) {\n      this.destination.error(err);\n    }\n\n    this.seed = result;\n    this.destination.next(result);\n  };\n\n  return ScanSubscriber;\n}(Subscriber_1.Subscriber);","map":{"version":3,"names":["__extends","d","b","p","hasOwnProperty","__","constructor","prototype","Object","create","Subscriber_1","require","scan","accumulator","seed","hasSeed","arguments","length","scanOperatorFunction","source","lift","ScanOperator","exports","call","subscriber","subscribe","ScanSubscriber","_super","destination","_seed","index","defineProperty","get","set","value","enumerable","configurable","_next","next","_tryNext","result","err","error","Subscriber"],"sources":["C:/Users/vidit.jain/node_modules/rxjs/operators/scan.js"],"sourcesContent":["\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\n/* tslint:enable:max-line-length */\n/**\n * Applies an accumulator function over the source Observable, and returns each\n * intermediate result, with an optional seed value.\n *\n * <span class=\"informal\">It's like {@link reduce}, but emits the current\n * accumulation whenever the source emits a value.</span>\n *\n * <img src=\"./img/scan.png\" width=\"100%\">\n *\n * Combines together all values emitted on the source, using an accumulator\n * function that knows how to join a new source value into the accumulation from\n * the past. Is similar to {@link reduce}, but emits the intermediate\n * accumulations.\n *\n * Returns an Observable that applies a specified `accumulator` function to each\n * item emitted by the source Observable. If a `seed` value is specified, then\n * that value will be used as the initial value for the accumulator. If no seed\n * value is specified, the first item of the source is used as the seed.\n *\n * @example <caption>Count the number of click events</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var ones = clicks.mapTo(1);\n * var seed = 0;\n * var count = ones.scan((acc, one) => acc + one, seed);\n * count.subscribe(x => console.log(x));\n *\n * @see {@link expand}\n * @see {@link mergeScan}\n * @see {@link reduce}\n *\n * @param {function(acc: R, value: T, index: number): R} accumulator\n * The accumulator function called on each source value.\n * @param {T|R} [seed] The initial accumulation value.\n * @return {Observable<R>} An observable of the accumulated values.\n * @method scan\n * @owner Observable\n */\nfunction scan(accumulator, seed) {\n    var hasSeed = false;\n    // providing a seed of `undefined` *should* be valid and trigger\n    // hasSeed! so don't use `seed !== undefined` checks!\n    // For this reason, we have to check it here at the original call site\n    // otherwise inside Operator/Subscriber we won't know if `undefined`\n    // means they didn't provide anything or if they literally provided `undefined`\n    if (arguments.length >= 2) {\n        hasSeed = true;\n    }\n    return function scanOperatorFunction(source) {\n        return source.lift(new ScanOperator(accumulator, seed, hasSeed));\n    };\n}\nexports.scan = scan;\nvar ScanOperator = (function () {\n    function ScanOperator(accumulator, seed, hasSeed) {\n        if (hasSeed === void 0) { hasSeed = false; }\n        this.accumulator = accumulator;\n        this.seed = seed;\n        this.hasSeed = hasSeed;\n    }\n    ScanOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new ScanSubscriber(subscriber, this.accumulator, this.seed, this.hasSeed));\n    };\n    return ScanOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar ScanSubscriber = (function (_super) {\n    __extends(ScanSubscriber, _super);\n    function ScanSubscriber(destination, accumulator, _seed, hasSeed) {\n        _super.call(this, destination);\n        this.accumulator = accumulator;\n        this._seed = _seed;\n        this.hasSeed = hasSeed;\n        this.index = 0;\n    }\n    Object.defineProperty(ScanSubscriber.prototype, \"seed\", {\n        get: function () {\n            return this._seed;\n        },\n        set: function (value) {\n            this.hasSeed = true;\n            this._seed = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    ScanSubscriber.prototype._next = function (value) {\n        if (!this.hasSeed) {\n            this.seed = value;\n            this.destination.next(value);\n        }\n        else {\n            return this._tryNext(value);\n        }\n    };\n    ScanSubscriber.prototype._tryNext = function (value) {\n        var index = this.index++;\n        var result;\n        try {\n            result = this.accumulator(this.seed, value, index);\n        }\n        catch (err) {\n            this.destination.error(err);\n        }\n        this.seed = result;\n        this.destination.next(result);\n    };\n    return ScanSubscriber;\n}(Subscriber_1.Subscriber));\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}
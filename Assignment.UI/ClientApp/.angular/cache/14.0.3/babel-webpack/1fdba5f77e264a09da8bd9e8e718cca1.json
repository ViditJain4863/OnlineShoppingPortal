{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function (d, b) {\n  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\n  function __() {\n    this.constructor = d;\n  }\n\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n\nvar Subscriber_1 = require('../Subscriber');\n\nvar Subject_1 = require('../Subject');\n/**\n * Branch out the source Observable values as a nested Observable with each\n * nested Observable emitting at most `windowSize` values.\n *\n * <span class=\"informal\">It's like {@link bufferCount}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowCount.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits windows every `startWindowEvery`\n * items, each containing no more than `windowSize` items. When the source\n * Observable completes or encounters an error, the output Observable emits\n * the current window and propagates the notification from the source\n * Observable. If `startWindowEvery` is not provided, then new windows are\n * started immediately at the start of the source and when each window completes\n * with size `windowSize`.\n *\n * @example <caption>Ignore every 3rd click event, starting from the first one</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowCount(3)\n *   .map(win => win.skip(1)) // skip first of every 3 clicks\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Ignore every 3rd click event, starting from the third one</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowCount(2, 3)\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @see {@link window}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link windowWhen}\n * @see {@link bufferCount}\n *\n * @param {number} windowSize The maximum number of values emitted by each\n * window.\n * @param {number} [startWindowEvery] Interval at which to start a new window.\n * For example if `startWindowEvery` is `2`, then a new window will be started\n * on every other value from the source. A new window is started at the\n * beginning of the source by default.\n * @return {Observable<Observable<T>>} An Observable of windows, which in turn\n * are Observable of values.\n * @method windowCount\n * @owner Observable\n */\n\n\nfunction windowCount(windowSize, startWindowEvery) {\n  if (startWindowEvery === void 0) {\n    startWindowEvery = 0;\n  }\n\n  return function windowCountOperatorFunction(source) {\n    return source.lift(new WindowCountOperator(windowSize, startWindowEvery));\n  };\n}\n\nexports.windowCount = windowCount;\n\nvar WindowCountOperator = function () {\n  function WindowCountOperator(windowSize, startWindowEvery) {\n    this.windowSize = windowSize;\n    this.startWindowEvery = startWindowEvery;\n  }\n\n  WindowCountOperator.prototype.call = function (subscriber, source) {\n    return source.subscribe(new WindowCountSubscriber(subscriber, this.windowSize, this.startWindowEvery));\n  };\n\n  return WindowCountOperator;\n}();\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\n\n\nvar WindowCountSubscriber = function (_super) {\n  __extends(WindowCountSubscriber, _super);\n\n  function WindowCountSubscriber(destination, windowSize, startWindowEvery) {\n    _super.call(this, destination);\n\n    this.destination = destination;\n    this.windowSize = windowSize;\n    this.startWindowEvery = startWindowEvery;\n    this.windows = [new Subject_1.Subject()];\n    this.count = 0;\n    destination.next(this.windows[0]);\n  }\n\n  WindowCountSubscriber.prototype._next = function (value) {\n    var startWindowEvery = this.startWindowEvery > 0 ? this.startWindowEvery : this.windowSize;\n    var destination = this.destination;\n    var windowSize = this.windowSize;\n    var windows = this.windows;\n    var len = windows.length;\n\n    for (var i = 0; i < len && !this.closed; i++) {\n      windows[i].next(value);\n    }\n\n    var c = this.count - windowSize + 1;\n\n    if (c >= 0 && c % startWindowEvery === 0 && !this.closed) {\n      windows.shift().complete();\n    }\n\n    if (++this.count % startWindowEvery === 0 && !this.closed) {\n      var window_1 = new Subject_1.Subject();\n      windows.push(window_1);\n      destination.next(window_1);\n    }\n  };\n\n  WindowCountSubscriber.prototype._error = function (err) {\n    var windows = this.windows;\n\n    if (windows) {\n      while (windows.length > 0 && !this.closed) {\n        windows.shift().error(err);\n      }\n    }\n\n    this.destination.error(err);\n  };\n\n  WindowCountSubscriber.prototype._complete = function () {\n    var windows = this.windows;\n\n    if (windows) {\n      while (windows.length > 0 && !this.closed) {\n        windows.shift().complete();\n      }\n    }\n\n    this.destination.complete();\n  };\n  /** @deprecated internal use only */\n\n\n  WindowCountSubscriber.prototype._unsubscribe = function () {\n    this.count = 0;\n    this.windows = null;\n  };\n\n  return WindowCountSubscriber;\n}(Subscriber_1.Subscriber);","map":{"version":3,"names":["__extends","d","b","p","hasOwnProperty","__","constructor","prototype","Object","create","Subscriber_1","require","Subject_1","windowCount","windowSize","startWindowEvery","windowCountOperatorFunction","source","lift","WindowCountOperator","exports","call","subscriber","subscribe","WindowCountSubscriber","_super","destination","windows","Subject","count","next","_next","value","len","length","i","closed","c","shift","complete","window_1","push","_error","err","error","_complete","_unsubscribe","Subscriber"],"sources":["C:/Users/vidit.jain/node_modules/rxjs/operators/windowCount.js"],"sourcesContent":["\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\nvar Subject_1 = require('../Subject');\n/**\n * Branch out the source Observable values as a nested Observable with each\n * nested Observable emitting at most `windowSize` values.\n *\n * <span class=\"informal\">It's like {@link bufferCount}, but emits a nested\n * Observable instead of an array.</span>\n *\n * <img src=\"./img/windowCount.png\" width=\"100%\">\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits windows every `startWindowEvery`\n * items, each containing no more than `windowSize` items. When the source\n * Observable completes or encounters an error, the output Observable emits\n * the current window and propagates the notification from the source\n * Observable. If `startWindowEvery` is not provided, then new windows are\n * started immediately at the start of the source and when each window completes\n * with size `windowSize`.\n *\n * @example <caption>Ignore every 3rd click event, starting from the first one</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowCount(3)\n *   .map(win => win.skip(1)) // skip first of every 3 clicks\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @example <caption>Ignore every 3rd click event, starting from the third one</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.windowCount(2, 3)\n *   .mergeAll(); // flatten the Observable-of-Observables\n * result.subscribe(x => console.log(x));\n *\n * @see {@link window}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link windowWhen}\n * @see {@link bufferCount}\n *\n * @param {number} windowSize The maximum number of values emitted by each\n * window.\n * @param {number} [startWindowEvery] Interval at which to start a new window.\n * For example if `startWindowEvery` is `2`, then a new window will be started\n * on every other value from the source. A new window is started at the\n * beginning of the source by default.\n * @return {Observable<Observable<T>>} An Observable of windows, which in turn\n * are Observable of values.\n * @method windowCount\n * @owner Observable\n */\nfunction windowCount(windowSize, startWindowEvery) {\n    if (startWindowEvery === void 0) { startWindowEvery = 0; }\n    return function windowCountOperatorFunction(source) {\n        return source.lift(new WindowCountOperator(windowSize, startWindowEvery));\n    };\n}\nexports.windowCount = windowCount;\nvar WindowCountOperator = (function () {\n    function WindowCountOperator(windowSize, startWindowEvery) {\n        this.windowSize = windowSize;\n        this.startWindowEvery = startWindowEvery;\n    }\n    WindowCountOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new WindowCountSubscriber(subscriber, this.windowSize, this.startWindowEvery));\n    };\n    return WindowCountOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar WindowCountSubscriber = (function (_super) {\n    __extends(WindowCountSubscriber, _super);\n    function WindowCountSubscriber(destination, windowSize, startWindowEvery) {\n        _super.call(this, destination);\n        this.destination = destination;\n        this.windowSize = windowSize;\n        this.startWindowEvery = startWindowEvery;\n        this.windows = [new Subject_1.Subject()];\n        this.count = 0;\n        destination.next(this.windows[0]);\n    }\n    WindowCountSubscriber.prototype._next = function (value) {\n        var startWindowEvery = (this.startWindowEvery > 0) ? this.startWindowEvery : this.windowSize;\n        var destination = this.destination;\n        var windowSize = this.windowSize;\n        var windows = this.windows;\n        var len = windows.length;\n        for (var i = 0; i < len && !this.closed; i++) {\n            windows[i].next(value);\n        }\n        var c = this.count - windowSize + 1;\n        if (c >= 0 && c % startWindowEvery === 0 && !this.closed) {\n            windows.shift().complete();\n        }\n        if (++this.count % startWindowEvery === 0 && !this.closed) {\n            var window_1 = new Subject_1.Subject();\n            windows.push(window_1);\n            destination.next(window_1);\n        }\n    };\n    WindowCountSubscriber.prototype._error = function (err) {\n        var windows = this.windows;\n        if (windows) {\n            while (windows.length > 0 && !this.closed) {\n                windows.shift().error(err);\n            }\n        }\n        this.destination.error(err);\n    };\n    WindowCountSubscriber.prototype._complete = function () {\n        var windows = this.windows;\n        if (windows) {\n            while (windows.length > 0 && !this.closed) {\n                windows.shift().complete();\n            }\n        }\n        this.destination.complete();\n    };\n    /** @deprecated internal use only */ WindowCountSubscriber.prototype._unsubscribe = function () {\n        this.count = 0;\n        this.windows = null;\n    };\n    return WindowCountSubscriber;\n}(Subscriber_1.Subscriber));\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}
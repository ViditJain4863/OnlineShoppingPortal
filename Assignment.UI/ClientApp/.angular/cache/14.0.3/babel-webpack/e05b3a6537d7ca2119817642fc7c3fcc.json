{"ast":null,"code":"\"use strict\";\n\nvar repeat_1 = require('../operators/repeat');\n/**\n * Returns an Observable that repeats the stream of items emitted by the source Observable at most count times.\n *\n * <img src=\"./img/repeat.png\" width=\"100%\">\n *\n * @param {number} [count] The number of times the source Observable items are repeated, a count of 0 will yield\n * an empty Observable.\n * @return {Observable} An Observable that repeats the stream of items emitted by the source Observable at most\n * count times.\n * @method repeat\n * @owner Observable\n */\n\n\nfunction repeat(count) {\n  if (count === void 0) {\n    count = -1;\n  }\n\n  return repeat_1.repeat(count)(this);\n}\n\nexports.repeat = repeat;","map":{"version":3,"names":["repeat_1","require","repeat","count","exports"],"sources":["C:/Users/vidit.jain/node_modules/rxjs/operator/repeat.js"],"sourcesContent":["\"use strict\";\nvar repeat_1 = require('../operators/repeat');\n/**\n * Returns an Observable that repeats the stream of items emitted by the source Observable at most count times.\n *\n * <img src=\"./img/repeat.png\" width=\"100%\">\n *\n * @param {number} [count] The number of times the source Observable items are repeated, a count of 0 will yield\n * an empty Observable.\n * @return {Observable} An Observable that repeats the stream of items emitted by the source Observable at most\n * count times.\n * @method repeat\n * @owner Observable\n */\nfunction repeat(count) {\n    if (count === void 0) { count = -1; }\n    return repeat_1.repeat(count)(this);\n}\nexports.repeat = repeat;\n"],"mappings":"AAAA;;AACA,IAAIA,QAAQ,GAAGC,OAAO,CAAC,qBAAD,CAAtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASC,MAAT,CAAgBC,KAAhB,EAAuB;EACnB,IAAIA,KAAK,KAAK,KAAK,CAAnB,EAAsB;IAAEA,KAAK,GAAG,CAAC,CAAT;EAAa;;EACrC,OAAOH,QAAQ,CAACE,MAAT,CAAgBC,KAAhB,EAAuB,IAAvB,CAAP;AACH;;AACDC,OAAO,CAACF,MAAR,GAAiBA,MAAjB"},"metadata":{},"sourceType":"script"}
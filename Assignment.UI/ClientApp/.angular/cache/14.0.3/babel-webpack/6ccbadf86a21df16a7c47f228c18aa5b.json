{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function (d, b) {\n  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\n  function __() {\n    this.constructor = d;\n  }\n\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n\nvar Subscription_1 = require('../Subscription');\n\nvar tryCatch_1 = require('../util/tryCatch');\n\nvar errorObject_1 = require('../util/errorObject');\n\nvar OuterSubscriber_1 = require('../OuterSubscriber');\n\nvar subscribeToResult_1 = require('../util/subscribeToResult');\n/**\n * Buffers the source Observable values, using a factory function of closing\n * Observables to determine when to close, emit, and reset the buffer.\n *\n * <span class=\"informal\">Collects values from the past as an array. When it\n * starts collecting values, it calls a function that returns an Observable that\n * tells when to close the buffer and restart collecting.</span>\n *\n * <img src=\"./img/bufferWhen.png\" width=\"100%\">\n *\n * Opens a buffer immediately, then closes the buffer when the observable\n * returned by calling `closingSelector` function emits a value. When it closes\n * the buffer, it immediately opens a new buffer and repeats the process.\n *\n * @example <caption>Emit an array of the last clicks every [1-5] random seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferWhen(() =>\n *   Rx.Observable.interval(1000 + Math.random() * 4000)\n * );\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link windowWhen}\n *\n * @param {function(): Observable} closingSelector A function that takes no\n * arguments and returns an Observable that signals buffer closure.\n * @return {Observable<T[]>} An observable of arrays of buffered values.\n * @method bufferWhen\n * @owner Observable\n */\n\n\nfunction bufferWhen(closingSelector) {\n  return function (source) {\n    return source.lift(new BufferWhenOperator(closingSelector));\n  };\n}\n\nexports.bufferWhen = bufferWhen;\n\nvar BufferWhenOperator = function () {\n  function BufferWhenOperator(closingSelector) {\n    this.closingSelector = closingSelector;\n  }\n\n  BufferWhenOperator.prototype.call = function (subscriber, source) {\n    return source.subscribe(new BufferWhenSubscriber(subscriber, this.closingSelector));\n  };\n\n  return BufferWhenOperator;\n}();\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\n\n\nvar BufferWhenSubscriber = function (_super) {\n  __extends(BufferWhenSubscriber, _super);\n\n  function BufferWhenSubscriber(destination, closingSelector) {\n    _super.call(this, destination);\n\n    this.closingSelector = closingSelector;\n    this.subscribing = false;\n    this.openBuffer();\n  }\n\n  BufferWhenSubscriber.prototype._next = function (value) {\n    this.buffer.push(value);\n  };\n\n  BufferWhenSubscriber.prototype._complete = function () {\n    var buffer = this.buffer;\n\n    if (buffer) {\n      this.destination.next(buffer);\n    }\n\n    _super.prototype._complete.call(this);\n  };\n  /** @deprecated internal use only */\n\n\n  BufferWhenSubscriber.prototype._unsubscribe = function () {\n    this.buffer = null;\n    this.subscribing = false;\n  };\n\n  BufferWhenSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n    this.openBuffer();\n  };\n\n  BufferWhenSubscriber.prototype.notifyComplete = function () {\n    if (this.subscribing) {\n      this.complete();\n    } else {\n      this.openBuffer();\n    }\n  };\n\n  BufferWhenSubscriber.prototype.openBuffer = function () {\n    var closingSubscription = this.closingSubscription;\n\n    if (closingSubscription) {\n      this.remove(closingSubscription);\n      closingSubscription.unsubscribe();\n    }\n\n    var buffer = this.buffer;\n\n    if (this.buffer) {\n      this.destination.next(buffer);\n    }\n\n    this.buffer = [];\n    var closingNotifier = tryCatch_1.tryCatch(this.closingSelector)();\n\n    if (closingNotifier === errorObject_1.errorObject) {\n      this.error(errorObject_1.errorObject.e);\n    } else {\n      closingSubscription = new Subscription_1.Subscription();\n      this.closingSubscription = closingSubscription;\n      this.add(closingSubscription);\n      this.subscribing = true;\n      closingSubscription.add(subscribeToResult_1.subscribeToResult(this, closingNotifier));\n      this.subscribing = false;\n    }\n  };\n\n  return BufferWhenSubscriber;\n}(OuterSubscriber_1.OuterSubscriber);","map":{"version":3,"names":["__extends","d","b","p","hasOwnProperty","__","constructor","prototype","Object","create","Subscription_1","require","tryCatch_1","errorObject_1","OuterSubscriber_1","subscribeToResult_1","bufferWhen","closingSelector","source","lift","BufferWhenOperator","exports","call","subscriber","subscribe","BufferWhenSubscriber","_super","destination","subscribing","openBuffer","_next","value","buffer","push","_complete","next","_unsubscribe","notifyNext","outerValue","innerValue","outerIndex","innerIndex","innerSub","notifyComplete","complete","closingSubscription","remove","unsubscribe","closingNotifier","tryCatch","errorObject","error","e","Subscription","add","subscribeToResult","OuterSubscriber"],"sources":["C:/Users/vidit.jain/node_modules/rxjs/operators/bufferWhen.js"],"sourcesContent":["\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscription_1 = require('../Subscription');\nvar tryCatch_1 = require('../util/tryCatch');\nvar errorObject_1 = require('../util/errorObject');\nvar OuterSubscriber_1 = require('../OuterSubscriber');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\n/**\n * Buffers the source Observable values, using a factory function of closing\n * Observables to determine when to close, emit, and reset the buffer.\n *\n * <span class=\"informal\">Collects values from the past as an array. When it\n * starts collecting values, it calls a function that returns an Observable that\n * tells when to close the buffer and restart collecting.</span>\n *\n * <img src=\"./img/bufferWhen.png\" width=\"100%\">\n *\n * Opens a buffer immediately, then closes the buffer when the observable\n * returned by calling `closingSelector` function emits a value. When it closes\n * the buffer, it immediately opens a new buffer and repeats the process.\n *\n * @example <caption>Emit an array of the last clicks every [1-5] random seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var buffered = clicks.bufferWhen(() =>\n *   Rx.Observable.interval(1000 + Math.random() * 4000)\n * );\n * buffered.subscribe(x => console.log(x));\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link windowWhen}\n *\n * @param {function(): Observable} closingSelector A function that takes no\n * arguments and returns an Observable that signals buffer closure.\n * @return {Observable<T[]>} An observable of arrays of buffered values.\n * @method bufferWhen\n * @owner Observable\n */\nfunction bufferWhen(closingSelector) {\n    return function (source) {\n        return source.lift(new BufferWhenOperator(closingSelector));\n    };\n}\nexports.bufferWhen = bufferWhen;\nvar BufferWhenOperator = (function () {\n    function BufferWhenOperator(closingSelector) {\n        this.closingSelector = closingSelector;\n    }\n    BufferWhenOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new BufferWhenSubscriber(subscriber, this.closingSelector));\n    };\n    return BufferWhenOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar BufferWhenSubscriber = (function (_super) {\n    __extends(BufferWhenSubscriber, _super);\n    function BufferWhenSubscriber(destination, closingSelector) {\n        _super.call(this, destination);\n        this.closingSelector = closingSelector;\n        this.subscribing = false;\n        this.openBuffer();\n    }\n    BufferWhenSubscriber.prototype._next = function (value) {\n        this.buffer.push(value);\n    };\n    BufferWhenSubscriber.prototype._complete = function () {\n        var buffer = this.buffer;\n        if (buffer) {\n            this.destination.next(buffer);\n        }\n        _super.prototype._complete.call(this);\n    };\n    /** @deprecated internal use only */ BufferWhenSubscriber.prototype._unsubscribe = function () {\n        this.buffer = null;\n        this.subscribing = false;\n    };\n    BufferWhenSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.openBuffer();\n    };\n    BufferWhenSubscriber.prototype.notifyComplete = function () {\n        if (this.subscribing) {\n            this.complete();\n        }\n        else {\n            this.openBuffer();\n        }\n    };\n    BufferWhenSubscriber.prototype.openBuffer = function () {\n        var closingSubscription = this.closingSubscription;\n        if (closingSubscription) {\n            this.remove(closingSubscription);\n            closingSubscription.unsubscribe();\n        }\n        var buffer = this.buffer;\n        if (this.buffer) {\n            this.destination.next(buffer);\n        }\n        this.buffer = [];\n        var closingNotifier = tryCatch_1.tryCatch(this.closingSelector)();\n        if (closingNotifier === errorObject_1.errorObject) {\n            this.error(errorObject_1.errorObject.e);\n        }\n        else {\n            closingSubscription = new Subscription_1.Subscription();\n            this.closingSubscription = closingSubscription;\n            this.add(closingSubscription);\n            this.subscribing = true;\n            closingSubscription.add(subscribeToResult_1.subscribeToResult(this, closingNotifier));\n            this.subscribing = false;\n        }\n    };\n    return BufferWhenSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function (d, b) {\n  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\n  function __() {\n    this.constructor = d;\n  }\n\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n\nvar isNumeric_1 = require('../util/isNumeric');\n\nvar Observable_1 = require('../Observable');\n\nvar async_1 = require('../scheduler/async');\n\nvar isScheduler_1 = require('../util/isScheduler');\n\nvar isDate_1 = require('../util/isDate');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\n\n\nvar TimerObservable = function (_super) {\n  __extends(TimerObservable, _super);\n\n  function TimerObservable(dueTime, period, scheduler) {\n    if (dueTime === void 0) {\n      dueTime = 0;\n    }\n\n    _super.call(this);\n\n    this.period = -1;\n    this.dueTime = 0;\n\n    if (isNumeric_1.isNumeric(period)) {\n      this.period = Number(period) < 1 && 1 || Number(period);\n    } else if (isScheduler_1.isScheduler(period)) {\n      scheduler = period;\n    }\n\n    if (!isScheduler_1.isScheduler(scheduler)) {\n      scheduler = async_1.async;\n    }\n\n    this.scheduler = scheduler;\n    this.dueTime = isDate_1.isDate(dueTime) ? +dueTime - this.scheduler.now() : dueTime;\n  }\n  /**\n   * Creates an Observable that starts emitting after an `initialDelay` and\n   * emits ever increasing numbers after each `period` of time thereafter.\n   *\n   * <span class=\"informal\">Its like {@link interval}, but you can specify when\n   * should the emissions start.</span>\n   *\n   * <img src=\"./img/timer.png\" width=\"100%\">\n   *\n   * `timer` returns an Observable that emits an infinite sequence of ascending\n   * integers, with a constant interval of time, `period` of your choosing\n   * between those emissions. The first emission happens after the specified\n   * `initialDelay`. The initial delay may be a {@link Date}. By default, this\n   * operator uses the `async` IScheduler to provide a notion of time, but you\n   * may pass any IScheduler to it. If `period` is not specified, the output\n   * Observable emits only one value, `0`. Otherwise, it emits an infinite\n   * sequence.\n   *\n   * @example <caption>Emits ascending numbers, one every second (1000ms), starting after 3 seconds</caption>\n   * var numbers = Rx.Observable.timer(3000, 1000);\n   * numbers.subscribe(x => console.log(x));\n   *\n   * @example <caption>Emits one number after five seconds</caption>\n   * var numbers = Rx.Observable.timer(5000);\n   * numbers.subscribe(x => console.log(x));\n   *\n   * @see {@link interval}\n   * @see {@link delay}\n   *\n   * @param {number|Date} initialDelay The initial delay time to wait before\n   * emitting the first value of `0`.\n   * @param {number} [period] The period of time between emissions of the\n   * subsequent numbers.\n   * @param {Scheduler} [scheduler=async] The IScheduler to use for scheduling\n   * the emission of values, and providing a notion of \"time\".\n   * @return {Observable} An Observable that emits a `0` after the\n   * `initialDelay` and ever increasing numbers after each `period` of time\n   * thereafter.\n   * @static true\n   * @name timer\n   * @owner Observable\n   */\n\n\n  TimerObservable.create = function (initialDelay, period, scheduler) {\n    if (initialDelay === void 0) {\n      initialDelay = 0;\n    }\n\n    return new TimerObservable(initialDelay, period, scheduler);\n  };\n\n  TimerObservable.dispatch = function (state) {\n    var index = state.index,\n        period = state.period,\n        subscriber = state.subscriber;\n    var action = this;\n    subscriber.next(index);\n\n    if (subscriber.closed) {\n      return;\n    } else if (period === -1) {\n      return subscriber.complete();\n    }\n\n    state.index = index + 1;\n    action.schedule(state, period);\n  };\n  /** @deprecated internal use only */\n\n\n  TimerObservable.prototype._subscribe = function (subscriber) {\n    var index = 0;\n\n    var _a = this,\n        period = _a.period,\n        dueTime = _a.dueTime,\n        scheduler = _a.scheduler;\n\n    return scheduler.schedule(TimerObservable.dispatch, dueTime, {\n      index: index,\n      period: period,\n      subscriber: subscriber\n    });\n  };\n\n  return TimerObservable;\n}(Observable_1.Observable);\n\nexports.TimerObservable = TimerObservable;","map":{"version":3,"names":["__extends","d","b","p","hasOwnProperty","__","constructor","prototype","Object","create","isNumeric_1","require","Observable_1","async_1","isScheduler_1","isDate_1","TimerObservable","_super","dueTime","period","scheduler","call","isNumeric","Number","isScheduler","async","isDate","now","initialDelay","dispatch","state","index","subscriber","action","next","closed","complete","schedule","_subscribe","_a","Observable","exports"],"sources":["C:/Users/vidit.jain/node_modules/rxjs/observable/TimerObservable.js"],"sourcesContent":["\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar isNumeric_1 = require('../util/isNumeric');\nvar Observable_1 = require('../Observable');\nvar async_1 = require('../scheduler/async');\nvar isScheduler_1 = require('../util/isScheduler');\nvar isDate_1 = require('../util/isDate');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar TimerObservable = (function (_super) {\n    __extends(TimerObservable, _super);\n    function TimerObservable(dueTime, period, scheduler) {\n        if (dueTime === void 0) { dueTime = 0; }\n        _super.call(this);\n        this.period = -1;\n        this.dueTime = 0;\n        if (isNumeric_1.isNumeric(period)) {\n            this.period = Number(period) < 1 && 1 || Number(period);\n        }\n        else if (isScheduler_1.isScheduler(period)) {\n            scheduler = period;\n        }\n        if (!isScheduler_1.isScheduler(scheduler)) {\n            scheduler = async_1.async;\n        }\n        this.scheduler = scheduler;\n        this.dueTime = isDate_1.isDate(dueTime) ?\n            (+dueTime - this.scheduler.now()) :\n            dueTime;\n    }\n    /**\n     * Creates an Observable that starts emitting after an `initialDelay` and\n     * emits ever increasing numbers after each `period` of time thereafter.\n     *\n     * <span class=\"informal\">Its like {@link interval}, but you can specify when\n     * should the emissions start.</span>\n     *\n     * <img src=\"./img/timer.png\" width=\"100%\">\n     *\n     * `timer` returns an Observable that emits an infinite sequence of ascending\n     * integers, with a constant interval of time, `period` of your choosing\n     * between those emissions. The first emission happens after the specified\n     * `initialDelay`. The initial delay may be a {@link Date}. By default, this\n     * operator uses the `async` IScheduler to provide a notion of time, but you\n     * may pass any IScheduler to it. If `period` is not specified, the output\n     * Observable emits only one value, `0`. Otherwise, it emits an infinite\n     * sequence.\n     *\n     * @example <caption>Emits ascending numbers, one every second (1000ms), starting after 3 seconds</caption>\n     * var numbers = Rx.Observable.timer(3000, 1000);\n     * numbers.subscribe(x => console.log(x));\n     *\n     * @example <caption>Emits one number after five seconds</caption>\n     * var numbers = Rx.Observable.timer(5000);\n     * numbers.subscribe(x => console.log(x));\n     *\n     * @see {@link interval}\n     * @see {@link delay}\n     *\n     * @param {number|Date} initialDelay The initial delay time to wait before\n     * emitting the first value of `0`.\n     * @param {number} [period] The period of time between emissions of the\n     * subsequent numbers.\n     * @param {Scheduler} [scheduler=async] The IScheduler to use for scheduling\n     * the emission of values, and providing a notion of \"time\".\n     * @return {Observable} An Observable that emits a `0` after the\n     * `initialDelay` and ever increasing numbers after each `period` of time\n     * thereafter.\n     * @static true\n     * @name timer\n     * @owner Observable\n     */\n    TimerObservable.create = function (initialDelay, period, scheduler) {\n        if (initialDelay === void 0) { initialDelay = 0; }\n        return new TimerObservable(initialDelay, period, scheduler);\n    };\n    TimerObservable.dispatch = function (state) {\n        var index = state.index, period = state.period, subscriber = state.subscriber;\n        var action = this;\n        subscriber.next(index);\n        if (subscriber.closed) {\n            return;\n        }\n        else if (period === -1) {\n            return subscriber.complete();\n        }\n        state.index = index + 1;\n        action.schedule(state, period);\n    };\n    /** @deprecated internal use only */ TimerObservable.prototype._subscribe = function (subscriber) {\n        var index = 0;\n        var _a = this, period = _a.period, dueTime = _a.dueTime, scheduler = _a.scheduler;\n        return scheduler.schedule(TimerObservable.dispatch, dueTime, {\n            index: index, period: period, subscriber: subscriber\n        });\n    };\n    return TimerObservable;\n}(Observable_1.Observable));\nexports.TimerObservable = TimerObservable;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}
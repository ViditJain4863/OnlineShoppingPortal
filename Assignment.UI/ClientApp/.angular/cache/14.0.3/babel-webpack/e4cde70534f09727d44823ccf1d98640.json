{"ast":null,"code":"\"use strict\";\n/**\n * An execution context and a data structure to order tasks and schedule their\n * execution. Provides a notion of (potentially virtual) time, through the\n * `now()` getter method.\n *\n * Each unit of work in a Scheduler is called an {@link Action}.\n *\n * ```ts\n * class Scheduler {\n *   now(): number;\n *   schedule(work, delay?, state?): Subscription;\n * }\n * ```\n *\n * @class Scheduler\n */\n\nvar Scheduler = function () {\n  function Scheduler(SchedulerAction, now) {\n    if (now === void 0) {\n      now = Scheduler.now;\n    }\n\n    this.SchedulerAction = SchedulerAction;\n    this.now = now;\n  }\n  /**\n   * Schedules a function, `work`, for execution. May happen at some point in\n   * the future, according to the `delay` parameter, if specified. May be passed\n   * some context object, `state`, which will be passed to the `work` function.\n   *\n   * The given arguments will be processed an stored as an Action object in a\n   * queue of actions.\n   *\n   * @param {function(state: ?T): ?Subscription} work A function representing a\n   * task, or some unit of work to be executed by the Scheduler.\n   * @param {number} [delay] Time to wait before executing the work, where the\n   * time unit is implicit and defined by the Scheduler itself.\n   * @param {T} [state] Some contextual data that the `work` function uses when\n   * called by the Scheduler.\n   * @return {Subscription} A subscription in order to be able to unsubscribe\n   * the scheduled work.\n   */\n\n\n  Scheduler.prototype.schedule = function (work, delay, state) {\n    if (delay === void 0) {\n      delay = 0;\n    }\n\n    return new this.SchedulerAction(this, work).schedule(state, delay);\n  };\n\n  Scheduler.now = Date.now ? Date.now : function () {\n    return +new Date();\n  };\n  return Scheduler;\n}();\n\nexports.Scheduler = Scheduler;","map":{"version":3,"names":["Scheduler","SchedulerAction","now","prototype","schedule","work","delay","state","Date","exports"],"sources":["C:/Users/vidit.jain/node_modules/rxjs/Scheduler.js"],"sourcesContent":["\"use strict\";\n/**\n * An execution context and a data structure to order tasks and schedule their\n * execution. Provides a notion of (potentially virtual) time, through the\n * `now()` getter method.\n *\n * Each unit of work in a Scheduler is called an {@link Action}.\n *\n * ```ts\n * class Scheduler {\n *   now(): number;\n *   schedule(work, delay?, state?): Subscription;\n * }\n * ```\n *\n * @class Scheduler\n */\nvar Scheduler = (function () {\n    function Scheduler(SchedulerAction, now) {\n        if (now === void 0) { now = Scheduler.now; }\n        this.SchedulerAction = SchedulerAction;\n        this.now = now;\n    }\n    /**\n     * Schedules a function, `work`, for execution. May happen at some point in\n     * the future, according to the `delay` parameter, if specified. May be passed\n     * some context object, `state`, which will be passed to the `work` function.\n     *\n     * The given arguments will be processed an stored as an Action object in a\n     * queue of actions.\n     *\n     * @param {function(state: ?T): ?Subscription} work A function representing a\n     * task, or some unit of work to be executed by the Scheduler.\n     * @param {number} [delay] Time to wait before executing the work, where the\n     * time unit is implicit and defined by the Scheduler itself.\n     * @param {T} [state] Some contextual data that the `work` function uses when\n     * called by the Scheduler.\n     * @return {Subscription} A subscription in order to be able to unsubscribe\n     * the scheduled work.\n     */\n    Scheduler.prototype.schedule = function (work, delay, state) {\n        if (delay === void 0) { delay = 0; }\n        return new this.SchedulerAction(this, work).schedule(state, delay);\n    };\n    Scheduler.now = Date.now ? Date.now : function () { return +new Date(); };\n    return Scheduler;\n}());\nexports.Scheduler = Scheduler;\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,IAAIA,SAAS,GAAI,YAAY;EACzB,SAASA,SAAT,CAAmBC,eAAnB,EAAoCC,GAApC,EAAyC;IACrC,IAAIA,GAAG,KAAK,KAAK,CAAjB,EAAoB;MAAEA,GAAG,GAAGF,SAAS,CAACE,GAAhB;IAAsB;;IAC5C,KAAKD,eAAL,GAAuBA,eAAvB;IACA,KAAKC,GAAL,GAAWA,GAAX;EACH;EACD;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACIF,SAAS,CAACG,SAAV,CAAoBC,QAApB,GAA+B,UAAUC,IAAV,EAAgBC,KAAhB,EAAuBC,KAAvB,EAA8B;IACzD,IAAID,KAAK,KAAK,KAAK,CAAnB,EAAsB;MAAEA,KAAK,GAAG,CAAR;IAAY;;IACpC,OAAO,IAAI,KAAKL,eAAT,CAAyB,IAAzB,EAA+BI,IAA/B,EAAqCD,QAArC,CAA8CG,KAA9C,EAAqDD,KAArD,CAAP;EACH,CAHD;;EAIAN,SAAS,CAACE,GAAV,GAAgBM,IAAI,CAACN,GAAL,GAAWM,IAAI,CAACN,GAAhB,GAAsB,YAAY;IAAE,OAAO,CAAC,IAAIM,IAAJ,EAAR;EAAqB,CAAzE;EACA,OAAOR,SAAP;AACH,CA7BgB,EAAjB;;AA8BAS,OAAO,CAACT,SAAR,GAAoBA,SAApB"},"metadata":{},"sourceType":"script"}
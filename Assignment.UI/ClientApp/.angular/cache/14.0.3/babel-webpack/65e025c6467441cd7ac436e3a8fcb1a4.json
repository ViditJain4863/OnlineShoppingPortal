{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function (d, b) {\n  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\n  function __() {\n    this.constructor = d;\n  }\n\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n\nvar Subscriber_1 = require('../Subscriber');\n\nvar Observable_1 = require('../Observable');\n\nvar OuterSubscriber_1 = require('../OuterSubscriber');\n\nvar subscribeToResult_1 = require('../util/subscribeToResult');\n/**\n * Delays the emission of items from the source Observable by a given time span\n * determined by the emissions of another Observable.\n *\n * <span class=\"informal\">It's like {@link delay}, but the time span of the\n * delay duration is determined by a second Observable.</span>\n *\n * <img src=\"./img/delayWhen.png\" width=\"100%\">\n *\n * `delayWhen` time shifts each emitted value from the source Observable by a\n * time span determined by another Observable. When the source emits a value,\n * the `delayDurationSelector` function is called with the source value as\n * argument, and should return an Observable, called the \"duration\" Observable.\n * The source value is emitted on the output Observable only when the duration\n * Observable emits a value or completes.\n *\n * Optionally, `delayWhen` takes a second argument, `subscriptionDelay`, which\n * is an Observable. When `subscriptionDelay` emits its first value or\n * completes, the source Observable is subscribed to and starts behaving like\n * described in the previous paragraph. If `subscriptionDelay` is not provided,\n * `delayWhen` will subscribe to the source Observable as soon as the output\n * Observable is subscribed.\n *\n * @example <caption>Delay each click by a random amount of time, between 0 and 5 seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var delayedClicks = clicks.delayWhen(event =>\n *   Rx.Observable.interval(Math.random() * 5000)\n * );\n * delayedClicks.subscribe(x => console.log(x));\n *\n * @see {@link debounce}\n * @see {@link delay}\n *\n * @param {function(value: T): Observable} delayDurationSelector A function that\n * returns an Observable for each value emitted by the source Observable, which\n * is then used to delay the emission of that item on the output Observable\n * until the Observable returned from this function emits a value.\n * @param {Observable} subscriptionDelay An Observable that triggers the\n * subscription to the source Observable once it emits any value.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by an amount of time specified by the Observable returned by\n * `delayDurationSelector`.\n * @method delayWhen\n * @owner Observable\n */\n\n\nfunction delayWhen(delayDurationSelector, subscriptionDelay) {\n  if (subscriptionDelay) {\n    return function (source) {\n      return new SubscriptionDelayObservable(source, subscriptionDelay).lift(new DelayWhenOperator(delayDurationSelector));\n    };\n  }\n\n  return function (source) {\n    return source.lift(new DelayWhenOperator(delayDurationSelector));\n  };\n}\n\nexports.delayWhen = delayWhen;\n\nvar DelayWhenOperator = function () {\n  function DelayWhenOperator(delayDurationSelector) {\n    this.delayDurationSelector = delayDurationSelector;\n  }\n\n  DelayWhenOperator.prototype.call = function (subscriber, source) {\n    return source.subscribe(new DelayWhenSubscriber(subscriber, this.delayDurationSelector));\n  };\n\n  return DelayWhenOperator;\n}();\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\n\n\nvar DelayWhenSubscriber = function (_super) {\n  __extends(DelayWhenSubscriber, _super);\n\n  function DelayWhenSubscriber(destination, delayDurationSelector) {\n    _super.call(this, destination);\n\n    this.delayDurationSelector = delayDurationSelector;\n    this.completed = false;\n    this.delayNotifierSubscriptions = [];\n    this.values = [];\n  }\n\n  DelayWhenSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n    this.destination.next(outerValue);\n    this.removeSubscription(innerSub);\n    this.tryComplete();\n  };\n\n  DelayWhenSubscriber.prototype.notifyError = function (error, innerSub) {\n    this._error(error);\n  };\n\n  DelayWhenSubscriber.prototype.notifyComplete = function (innerSub) {\n    var value = this.removeSubscription(innerSub);\n\n    if (value) {\n      this.destination.next(value);\n    }\n\n    this.tryComplete();\n  };\n\n  DelayWhenSubscriber.prototype._next = function (value) {\n    try {\n      var delayNotifier = this.delayDurationSelector(value);\n\n      if (delayNotifier) {\n        this.tryDelay(delayNotifier, value);\n      }\n    } catch (err) {\n      this.destination.error(err);\n    }\n  };\n\n  DelayWhenSubscriber.prototype._complete = function () {\n    this.completed = true;\n    this.tryComplete();\n  };\n\n  DelayWhenSubscriber.prototype.removeSubscription = function (subscription) {\n    subscription.unsubscribe();\n    var subscriptionIdx = this.delayNotifierSubscriptions.indexOf(subscription);\n    var value = null;\n\n    if (subscriptionIdx !== -1) {\n      value = this.values[subscriptionIdx];\n      this.delayNotifierSubscriptions.splice(subscriptionIdx, 1);\n      this.values.splice(subscriptionIdx, 1);\n    }\n\n    return value;\n  };\n\n  DelayWhenSubscriber.prototype.tryDelay = function (delayNotifier, value) {\n    var notifierSubscription = subscribeToResult_1.subscribeToResult(this, delayNotifier, value);\n\n    if (notifierSubscription && !notifierSubscription.closed) {\n      this.add(notifierSubscription);\n      this.delayNotifierSubscriptions.push(notifierSubscription);\n    }\n\n    this.values.push(value);\n  };\n\n  DelayWhenSubscriber.prototype.tryComplete = function () {\n    if (this.completed && this.delayNotifierSubscriptions.length === 0) {\n      this.destination.complete();\n    }\n  };\n\n  return DelayWhenSubscriber;\n}(OuterSubscriber_1.OuterSubscriber);\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\n\n\nvar SubscriptionDelayObservable = function (_super) {\n  __extends(SubscriptionDelayObservable, _super);\n\n  function SubscriptionDelayObservable(\n  /** @deprecated internal use only */\n  source, subscriptionDelay) {\n    _super.call(this);\n\n    this.source = source;\n    this.subscriptionDelay = subscriptionDelay;\n  }\n  /** @deprecated internal use only */\n\n\n  SubscriptionDelayObservable.prototype._subscribe = function (subscriber) {\n    this.subscriptionDelay.subscribe(new SubscriptionDelaySubscriber(subscriber, this.source));\n  };\n\n  return SubscriptionDelayObservable;\n}(Observable_1.Observable);\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\n\n\nvar SubscriptionDelaySubscriber = function (_super) {\n  __extends(SubscriptionDelaySubscriber, _super);\n\n  function SubscriptionDelaySubscriber(parent, source) {\n    _super.call(this);\n\n    this.parent = parent;\n    this.source = source;\n    this.sourceSubscribed = false;\n  }\n\n  SubscriptionDelaySubscriber.prototype._next = function (unused) {\n    this.subscribeToSource();\n  };\n\n  SubscriptionDelaySubscriber.prototype._error = function (err) {\n    this.unsubscribe();\n    this.parent.error(err);\n  };\n\n  SubscriptionDelaySubscriber.prototype._complete = function () {\n    this.subscribeToSource();\n  };\n\n  SubscriptionDelaySubscriber.prototype.subscribeToSource = function () {\n    if (!this.sourceSubscribed) {\n      this.sourceSubscribed = true;\n      this.unsubscribe();\n      this.source.subscribe(this.parent);\n    }\n  };\n\n  return SubscriptionDelaySubscriber;\n}(Subscriber_1.Subscriber);","map":{"version":3,"names":["__extends","d","b","p","hasOwnProperty","__","constructor","prototype","Object","create","Subscriber_1","require","Observable_1","OuterSubscriber_1","subscribeToResult_1","delayWhen","delayDurationSelector","subscriptionDelay","source","SubscriptionDelayObservable","lift","DelayWhenOperator","exports","call","subscriber","subscribe","DelayWhenSubscriber","_super","destination","completed","delayNotifierSubscriptions","values","notifyNext","outerValue","innerValue","outerIndex","innerIndex","innerSub","next","removeSubscription","tryComplete","notifyError","error","_error","notifyComplete","value","_next","delayNotifier","tryDelay","err","_complete","subscription","unsubscribe","subscriptionIdx","indexOf","splice","notifierSubscription","subscribeToResult","closed","add","push","length","complete","OuterSubscriber","_subscribe","SubscriptionDelaySubscriber","Observable","parent","sourceSubscribed","unused","subscribeToSource","Subscriber"],"sources":["C:/Users/vidit.jain/node_modules/rxjs/operators/delayWhen.js"],"sourcesContent":["\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\nvar Observable_1 = require('../Observable');\nvar OuterSubscriber_1 = require('../OuterSubscriber');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\n/**\n * Delays the emission of items from the source Observable by a given time span\n * determined by the emissions of another Observable.\n *\n * <span class=\"informal\">It's like {@link delay}, but the time span of the\n * delay duration is determined by a second Observable.</span>\n *\n * <img src=\"./img/delayWhen.png\" width=\"100%\">\n *\n * `delayWhen` time shifts each emitted value from the source Observable by a\n * time span determined by another Observable. When the source emits a value,\n * the `delayDurationSelector` function is called with the source value as\n * argument, and should return an Observable, called the \"duration\" Observable.\n * The source value is emitted on the output Observable only when the duration\n * Observable emits a value or completes.\n *\n * Optionally, `delayWhen` takes a second argument, `subscriptionDelay`, which\n * is an Observable. When `subscriptionDelay` emits its first value or\n * completes, the source Observable is subscribed to and starts behaving like\n * described in the previous paragraph. If `subscriptionDelay` is not provided,\n * `delayWhen` will subscribe to the source Observable as soon as the output\n * Observable is subscribed.\n *\n * @example <caption>Delay each click by a random amount of time, between 0 and 5 seconds</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var delayedClicks = clicks.delayWhen(event =>\n *   Rx.Observable.interval(Math.random() * 5000)\n * );\n * delayedClicks.subscribe(x => console.log(x));\n *\n * @see {@link debounce}\n * @see {@link delay}\n *\n * @param {function(value: T): Observable} delayDurationSelector A function that\n * returns an Observable for each value emitted by the source Observable, which\n * is then used to delay the emission of that item on the output Observable\n * until the Observable returned from this function emits a value.\n * @param {Observable} subscriptionDelay An Observable that triggers the\n * subscription to the source Observable once it emits any value.\n * @return {Observable} An Observable that delays the emissions of the source\n * Observable by an amount of time specified by the Observable returned by\n * `delayDurationSelector`.\n * @method delayWhen\n * @owner Observable\n */\nfunction delayWhen(delayDurationSelector, subscriptionDelay) {\n    if (subscriptionDelay) {\n        return function (source) {\n            return new SubscriptionDelayObservable(source, subscriptionDelay)\n                .lift(new DelayWhenOperator(delayDurationSelector));\n        };\n    }\n    return function (source) { return source.lift(new DelayWhenOperator(delayDurationSelector)); };\n}\nexports.delayWhen = delayWhen;\nvar DelayWhenOperator = (function () {\n    function DelayWhenOperator(delayDurationSelector) {\n        this.delayDurationSelector = delayDurationSelector;\n    }\n    DelayWhenOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new DelayWhenSubscriber(subscriber, this.delayDurationSelector));\n    };\n    return DelayWhenOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar DelayWhenSubscriber = (function (_super) {\n    __extends(DelayWhenSubscriber, _super);\n    function DelayWhenSubscriber(destination, delayDurationSelector) {\n        _super.call(this, destination);\n        this.delayDurationSelector = delayDurationSelector;\n        this.completed = false;\n        this.delayNotifierSubscriptions = [];\n        this.values = [];\n    }\n    DelayWhenSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.destination.next(outerValue);\n        this.removeSubscription(innerSub);\n        this.tryComplete();\n    };\n    DelayWhenSubscriber.prototype.notifyError = function (error, innerSub) {\n        this._error(error);\n    };\n    DelayWhenSubscriber.prototype.notifyComplete = function (innerSub) {\n        var value = this.removeSubscription(innerSub);\n        if (value) {\n            this.destination.next(value);\n        }\n        this.tryComplete();\n    };\n    DelayWhenSubscriber.prototype._next = function (value) {\n        try {\n            var delayNotifier = this.delayDurationSelector(value);\n            if (delayNotifier) {\n                this.tryDelay(delayNotifier, value);\n            }\n        }\n        catch (err) {\n            this.destination.error(err);\n        }\n    };\n    DelayWhenSubscriber.prototype._complete = function () {\n        this.completed = true;\n        this.tryComplete();\n    };\n    DelayWhenSubscriber.prototype.removeSubscription = function (subscription) {\n        subscription.unsubscribe();\n        var subscriptionIdx = this.delayNotifierSubscriptions.indexOf(subscription);\n        var value = null;\n        if (subscriptionIdx !== -1) {\n            value = this.values[subscriptionIdx];\n            this.delayNotifierSubscriptions.splice(subscriptionIdx, 1);\n            this.values.splice(subscriptionIdx, 1);\n        }\n        return value;\n    };\n    DelayWhenSubscriber.prototype.tryDelay = function (delayNotifier, value) {\n        var notifierSubscription = subscribeToResult_1.subscribeToResult(this, delayNotifier, value);\n        if (notifierSubscription && !notifierSubscription.closed) {\n            this.add(notifierSubscription);\n            this.delayNotifierSubscriptions.push(notifierSubscription);\n        }\n        this.values.push(value);\n    };\n    DelayWhenSubscriber.prototype.tryComplete = function () {\n        if (this.completed && this.delayNotifierSubscriptions.length === 0) {\n            this.destination.complete();\n        }\n    };\n    return DelayWhenSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SubscriptionDelayObservable = (function (_super) {\n    __extends(SubscriptionDelayObservable, _super);\n    function SubscriptionDelayObservable(/** @deprecated internal use only */ source, subscriptionDelay) {\n        _super.call(this);\n        this.source = source;\n        this.subscriptionDelay = subscriptionDelay;\n    }\n    /** @deprecated internal use only */ SubscriptionDelayObservable.prototype._subscribe = function (subscriber) {\n        this.subscriptionDelay.subscribe(new SubscriptionDelaySubscriber(subscriber, this.source));\n    };\n    return SubscriptionDelayObservable;\n}(Observable_1.Observable));\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar SubscriptionDelaySubscriber = (function (_super) {\n    __extends(SubscriptionDelaySubscriber, _super);\n    function SubscriptionDelaySubscriber(parent, source) {\n        _super.call(this);\n        this.parent = parent;\n        this.source = source;\n        this.sourceSubscribed = false;\n    }\n    SubscriptionDelaySubscriber.prototype._next = function (unused) {\n        this.subscribeToSource();\n    };\n    SubscriptionDelaySubscriber.prototype._error = function (err) {\n        this.unsubscribe();\n        this.parent.error(err);\n    };\n    SubscriptionDelaySubscriber.prototype._complete = function () {\n        this.subscribeToSource();\n    };\n    SubscriptionDelaySubscriber.prototype.subscribeToSource = function () {\n        if (!this.sourceSubscribed) {\n            this.sourceSubscribed = true;\n            this.unsubscribe();\n            this.source.subscribe(this.parent);\n        }\n    };\n    return SubscriptionDelaySubscriber;\n}(Subscriber_1.Subscriber));\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function (d, b) {\n  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\n  function __() {\n    this.constructor = d;\n  }\n\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n\nvar Observable_1 = require('../Observable');\n\nvar tryCatch_1 = require('../util/tryCatch');\n\nvar errorObject_1 = require('../util/errorObject');\n\nvar AsyncSubject_1 = require('../AsyncSubject');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\n\n\nvar BoundNodeCallbackObservable = function (_super) {\n  __extends(BoundNodeCallbackObservable, _super);\n\n  function BoundNodeCallbackObservable(callbackFunc, selector, args, context, scheduler) {\n    _super.call(this);\n\n    this.callbackFunc = callbackFunc;\n    this.selector = selector;\n    this.args = args;\n    this.context = context;\n    this.scheduler = scheduler;\n  }\n  /* tslint:enable:max-line-length */\n\n  /**\n   * Converts a Node.js-style callback API to a function that returns an\n   * Observable.\n   *\n   * <span class=\"informal\">It's just like {@link bindCallback}, but the\n   * callback is expected to be of type `callback(error, result)`.</span>\n   *\n   * `bindNodeCallback` is not an operator because its input and output are not\n   * Observables. The input is a function `func` with some parameters, but the\n   * last parameter must be a callback function that `func` calls when it is\n   * done. The callback function is expected to follow Node.js conventions,\n   * where the first argument to the callback is an error object, signaling\n   * whether call was successful. If that object is passed to callback, it means\n   * something went wrong.\n   *\n   * The output of `bindNodeCallback` is a function that takes the same\n   * parameters as `func`, except the last one (the callback). When the output\n   * function is called with arguments, it will return an Observable.\n   * If `func` calls its callback with error parameter present, Observable will\n   * error with that value as well. If error parameter is not passed, Observable will emit\n   * second parameter. If there are more parameters (third and so on),\n   * Observable will emit an array with all arguments, except first error argument.\n   *\n   * Optionally `bindNodeCallback` accepts selector function, which allows you to\n   * make resulting Observable emit value computed by selector, instead of regular\n   * callback arguments. It works similarly to {@link bindCallback} selector, but\n   * Node.js-style error argument will never be passed to that function.\n   *\n   * Note that `func` will not be called at the same time output function is,\n   * but rather whenever resulting Observable is subscribed. By default call to\n   * `func` will happen synchronously after subscription, but that can be changed\n   * with proper {@link Scheduler} provided as optional third parameter. Scheduler\n   * can also control when values from callback will be emitted by Observable.\n   * To find out more, check out documentation for {@link bindCallback}, where\n   * Scheduler works exactly the same.\n   *\n   * As in {@link bindCallback}, context (`this` property) of input function will be set to context\n   * of returned function, when it is called.\n   *\n   * After Observable emits value, it will complete immediately. This means\n   * even if `func` calls callback again, values from second and consecutive\n   * calls will never appear on the stream. If you need to handle functions\n   * that call callbacks multiple times, check out {@link fromEvent} or\n   * {@link fromEventPattern} instead.\n   *\n   * Note that `bindNodeCallback` can be used in non-Node.js environments as well.\n   * \"Node.js-style\" callbacks are just a convention, so if you write for\n   * browsers or any other environment and API you use implements that callback style,\n   * `bindNodeCallback` can be safely used on that API functions as well.\n   *\n   * Remember that Error object passed to callback does not have to be an instance\n   * of JavaScript built-in `Error` object. In fact, it does not even have to an object.\n   * Error parameter of callback function is interpreted as \"present\", when value\n   * of that parameter is truthy. It could be, for example, non-zero number, non-empty\n   * string or boolean `true`. In all of these cases resulting Observable would error\n   * with that value. This means usually regular style callbacks will fail very often when\n   * `bindNodeCallback` is used. If your Observable errors much more often then you\n   * would expect, check if callback really is called in Node.js-style and, if not,\n   * switch to {@link bindCallback} instead.\n   *\n   * Note that even if error parameter is technically present in callback, but its value\n   * is falsy, it still won't appear in array emitted by Observable or in selector function.\n   *\n   *\n   * @example <caption>Read a file from the filesystem and get the data as an Observable</caption>\n   * import * as fs from 'fs';\n   * var readFileAsObservable = Rx.Observable.bindNodeCallback(fs.readFile);\n   * var result = readFileAsObservable('./roadNames.txt', 'utf8');\n   * result.subscribe(x => console.log(x), e => console.error(e));\n   *\n   *\n   * @example <caption>Use on function calling callback with multiple arguments</caption>\n   * someFunction((err, a, b) => {\n   *   console.log(err); // null\n   *   console.log(a); // 5\n   *   console.log(b); // \"some string\"\n   * });\n   * var boundSomeFunction = Rx.Observable.bindNodeCallback(someFunction);\n   * boundSomeFunction()\n   * .subscribe(value => {\n   *   console.log(value); // [5, \"some string\"]\n   * });\n   *\n   *\n   * @example <caption>Use with selector function</caption>\n   * someFunction((err, a, b) => {\n   *   console.log(err); // undefined\n   *   console.log(a); // \"abc\"\n   *   console.log(b); // \"DEF\"\n   * });\n   * var boundSomeFunction = Rx.Observable.bindNodeCallback(someFunction, (a, b) => a + b);\n   * boundSomeFunction()\n   * .subscribe(value => {\n   *   console.log(value); // \"abcDEF\"\n   * });\n   *\n   *\n   * @example <caption>Use on function calling callback in regular style</caption>\n   * someFunction(a => {\n   *   console.log(a); // 5\n   * });\n   * var boundSomeFunction = Rx.Observable.bindNodeCallback(someFunction);\n   * boundSomeFunction()\n   * .subscribe(\n   *   value => {}             // never gets called\n   *   err => console.log(err) // 5\n   *);\n   *\n   *\n   * @see {@link bindCallback}\n   * @see {@link from}\n   * @see {@link fromPromise}\n   *\n   * @param {function} func Function with a Node.js-style callback as the last parameter.\n   * @param {function} [selector] A function which takes the arguments from the\n   * callback and maps those to a value to emit on the output Observable.\n   * @param {Scheduler} [scheduler] The scheduler on which to schedule the\n   * callbacks.\n   * @return {function(...params: *): Observable} A function which returns the\n   * Observable that delivers the same values the Node.js callback would\n   * deliver.\n   * @static true\n   * @name bindNodeCallback\n   * @owner Observable\n   */\n\n\n  BoundNodeCallbackObservable.create = function (func, selector, scheduler) {\n    if (selector === void 0) {\n      selector = undefined;\n    }\n\n    return function () {\n      var args = [];\n\n      for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i - 0] = arguments[_i];\n      }\n\n      return new BoundNodeCallbackObservable(func, selector, args, this, scheduler);\n    };\n  };\n  /** @deprecated internal use only */\n\n\n  BoundNodeCallbackObservable.prototype._subscribe = function (subscriber) {\n    var callbackFunc = this.callbackFunc;\n    var args = this.args;\n    var scheduler = this.scheduler;\n    var subject = this.subject;\n\n    if (!scheduler) {\n      if (!subject) {\n        subject = this.subject = new AsyncSubject_1.AsyncSubject();\n\n        var handler = function handlerFn() {\n          var innerArgs = [];\n\n          for (var _i = 0; _i < arguments.length; _i++) {\n            innerArgs[_i - 0] = arguments[_i];\n          }\n\n          var source = handlerFn.source;\n          var selector = source.selector,\n              subject = source.subject;\n          var err = innerArgs.shift();\n\n          if (err) {\n            subject.error(err);\n          } else if (selector) {\n            var result_1 = tryCatch_1.tryCatch(selector).apply(this, innerArgs);\n\n            if (result_1 === errorObject_1.errorObject) {\n              subject.error(errorObject_1.errorObject.e);\n            } else {\n              subject.next(result_1);\n              subject.complete();\n            }\n          } else {\n            subject.next(innerArgs.length <= 1 ? innerArgs[0] : innerArgs);\n            subject.complete();\n          }\n        }; // use named function instance to avoid closure.\n\n\n        handler.source = this;\n        var result = tryCatch_1.tryCatch(callbackFunc).apply(this.context, args.concat(handler));\n\n        if (result === errorObject_1.errorObject) {\n          subject.error(errorObject_1.errorObject.e);\n        }\n      }\n\n      return subject.subscribe(subscriber);\n    } else {\n      return scheduler.schedule(dispatch, 0, {\n        source: this,\n        subscriber: subscriber,\n        context: this.context\n      });\n    }\n  };\n\n  return BoundNodeCallbackObservable;\n}(Observable_1.Observable);\n\nexports.BoundNodeCallbackObservable = BoundNodeCallbackObservable;\n\nfunction dispatch(state) {\n  var self = this;\n  var source = state.source,\n      subscriber = state.subscriber,\n      context = state.context; // XXX: cast to `any` to access to the private field in `source`.\n\n  var _a = source,\n      callbackFunc = _a.callbackFunc,\n      args = _a.args,\n      scheduler = _a.scheduler;\n  var subject = source.subject;\n\n  if (!subject) {\n    subject = source.subject = new AsyncSubject_1.AsyncSubject();\n\n    var handler = function handlerFn() {\n      var innerArgs = [];\n\n      for (var _i = 0; _i < arguments.length; _i++) {\n        innerArgs[_i - 0] = arguments[_i];\n      }\n\n      var source = handlerFn.source;\n      var selector = source.selector,\n          subject = source.subject;\n      var err = innerArgs.shift();\n\n      if (err) {\n        self.add(scheduler.schedule(dispatchError, 0, {\n          err: err,\n          subject: subject\n        }));\n      } else if (selector) {\n        var result_2 = tryCatch_1.tryCatch(selector).apply(this, innerArgs);\n\n        if (result_2 === errorObject_1.errorObject) {\n          self.add(scheduler.schedule(dispatchError, 0, {\n            err: errorObject_1.errorObject.e,\n            subject: subject\n          }));\n        } else {\n          self.add(scheduler.schedule(dispatchNext, 0, {\n            value: result_2,\n            subject: subject\n          }));\n        }\n      } else {\n        var value = innerArgs.length <= 1 ? innerArgs[0] : innerArgs;\n        self.add(scheduler.schedule(dispatchNext, 0, {\n          value: value,\n          subject: subject\n        }));\n      }\n    }; // use named function to pass values in without closure\n\n\n    handler.source = source;\n    var result = tryCatch_1.tryCatch(callbackFunc).apply(context, args.concat(handler));\n\n    if (result === errorObject_1.errorObject) {\n      self.add(scheduler.schedule(dispatchError, 0, {\n        err: errorObject_1.errorObject.e,\n        subject: subject\n      }));\n    }\n  }\n\n  self.add(subject.subscribe(subscriber));\n}\n\nfunction dispatchNext(arg) {\n  var value = arg.value,\n      subject = arg.subject;\n  subject.next(value);\n  subject.complete();\n}\n\nfunction dispatchError(arg) {\n  var err = arg.err,\n      subject = arg.subject;\n  subject.error(err);\n}","map":{"version":3,"names":["__extends","d","b","p","hasOwnProperty","__","constructor","prototype","Object","create","Observable_1","require","tryCatch_1","errorObject_1","AsyncSubject_1","BoundNodeCallbackObservable","_super","callbackFunc","selector","args","context","scheduler","call","func","undefined","_i","arguments","length","_subscribe","subscriber","subject","AsyncSubject","handler","handlerFn","innerArgs","source","err","shift","error","result_1","tryCatch","apply","errorObject","e","next","complete","result","concat","subscribe","schedule","dispatch","Observable","exports","state","self","_a","add","dispatchError","result_2","dispatchNext","value","arg"],"sources":["C:/Users/vidit.jain/node_modules/rxjs/observable/BoundNodeCallbackObservable.js"],"sourcesContent":["\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Observable_1 = require('../Observable');\nvar tryCatch_1 = require('../util/tryCatch');\nvar errorObject_1 = require('../util/errorObject');\nvar AsyncSubject_1 = require('../AsyncSubject');\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @extends {Ignored}\n * @hide true\n */\nvar BoundNodeCallbackObservable = (function (_super) {\n    __extends(BoundNodeCallbackObservable, _super);\n    function BoundNodeCallbackObservable(callbackFunc, selector, args, context, scheduler) {\n        _super.call(this);\n        this.callbackFunc = callbackFunc;\n        this.selector = selector;\n        this.args = args;\n        this.context = context;\n        this.scheduler = scheduler;\n    }\n    /* tslint:enable:max-line-length */\n    /**\n     * Converts a Node.js-style callback API to a function that returns an\n     * Observable.\n     *\n     * <span class=\"informal\">It's just like {@link bindCallback}, but the\n     * callback is expected to be of type `callback(error, result)`.</span>\n     *\n     * `bindNodeCallback` is not an operator because its input and output are not\n     * Observables. The input is a function `func` with some parameters, but the\n     * last parameter must be a callback function that `func` calls when it is\n     * done. The callback function is expected to follow Node.js conventions,\n     * where the first argument to the callback is an error object, signaling\n     * whether call was successful. If that object is passed to callback, it means\n     * something went wrong.\n     *\n     * The output of `bindNodeCallback` is a function that takes the same\n     * parameters as `func`, except the last one (the callback). When the output\n     * function is called with arguments, it will return an Observable.\n     * If `func` calls its callback with error parameter present, Observable will\n     * error with that value as well. If error parameter is not passed, Observable will emit\n     * second parameter. If there are more parameters (third and so on),\n     * Observable will emit an array with all arguments, except first error argument.\n     *\n     * Optionally `bindNodeCallback` accepts selector function, which allows you to\n     * make resulting Observable emit value computed by selector, instead of regular\n     * callback arguments. It works similarly to {@link bindCallback} selector, but\n     * Node.js-style error argument will never be passed to that function.\n     *\n     * Note that `func` will not be called at the same time output function is,\n     * but rather whenever resulting Observable is subscribed. By default call to\n     * `func` will happen synchronously after subscription, but that can be changed\n     * with proper {@link Scheduler} provided as optional third parameter. Scheduler\n     * can also control when values from callback will be emitted by Observable.\n     * To find out more, check out documentation for {@link bindCallback}, where\n     * Scheduler works exactly the same.\n     *\n     * As in {@link bindCallback}, context (`this` property) of input function will be set to context\n     * of returned function, when it is called.\n     *\n     * After Observable emits value, it will complete immediately. This means\n     * even if `func` calls callback again, values from second and consecutive\n     * calls will never appear on the stream. If you need to handle functions\n     * that call callbacks multiple times, check out {@link fromEvent} or\n     * {@link fromEventPattern} instead.\n     *\n     * Note that `bindNodeCallback` can be used in non-Node.js environments as well.\n     * \"Node.js-style\" callbacks are just a convention, so if you write for\n     * browsers or any other environment and API you use implements that callback style,\n     * `bindNodeCallback` can be safely used on that API functions as well.\n     *\n     * Remember that Error object passed to callback does not have to be an instance\n     * of JavaScript built-in `Error` object. In fact, it does not even have to an object.\n     * Error parameter of callback function is interpreted as \"present\", when value\n     * of that parameter is truthy. It could be, for example, non-zero number, non-empty\n     * string or boolean `true`. In all of these cases resulting Observable would error\n     * with that value. This means usually regular style callbacks will fail very often when\n     * `bindNodeCallback` is used. If your Observable errors much more often then you\n     * would expect, check if callback really is called in Node.js-style and, if not,\n     * switch to {@link bindCallback} instead.\n     *\n     * Note that even if error parameter is technically present in callback, but its value\n     * is falsy, it still won't appear in array emitted by Observable or in selector function.\n     *\n     *\n     * @example <caption>Read a file from the filesystem and get the data as an Observable</caption>\n     * import * as fs from 'fs';\n     * var readFileAsObservable = Rx.Observable.bindNodeCallback(fs.readFile);\n     * var result = readFileAsObservable('./roadNames.txt', 'utf8');\n     * result.subscribe(x => console.log(x), e => console.error(e));\n     *\n     *\n     * @example <caption>Use on function calling callback with multiple arguments</caption>\n     * someFunction((err, a, b) => {\n     *   console.log(err); // null\n     *   console.log(a); // 5\n     *   console.log(b); // \"some string\"\n     * });\n     * var boundSomeFunction = Rx.Observable.bindNodeCallback(someFunction);\n     * boundSomeFunction()\n     * .subscribe(value => {\n     *   console.log(value); // [5, \"some string\"]\n     * });\n     *\n     *\n     * @example <caption>Use with selector function</caption>\n     * someFunction((err, a, b) => {\n     *   console.log(err); // undefined\n     *   console.log(a); // \"abc\"\n     *   console.log(b); // \"DEF\"\n     * });\n     * var boundSomeFunction = Rx.Observable.bindNodeCallback(someFunction, (a, b) => a + b);\n     * boundSomeFunction()\n     * .subscribe(value => {\n     *   console.log(value); // \"abcDEF\"\n     * });\n     *\n     *\n     * @example <caption>Use on function calling callback in regular style</caption>\n     * someFunction(a => {\n     *   console.log(a); // 5\n     * });\n     * var boundSomeFunction = Rx.Observable.bindNodeCallback(someFunction);\n     * boundSomeFunction()\n     * .subscribe(\n     *   value => {}             // never gets called\n     *   err => console.log(err) // 5\n     *);\n     *\n     *\n     * @see {@link bindCallback}\n     * @see {@link from}\n     * @see {@link fromPromise}\n     *\n     * @param {function} func Function with a Node.js-style callback as the last parameter.\n     * @param {function} [selector] A function which takes the arguments from the\n     * callback and maps those to a value to emit on the output Observable.\n     * @param {Scheduler} [scheduler] The scheduler on which to schedule the\n     * callbacks.\n     * @return {function(...params: *): Observable} A function which returns the\n     * Observable that delivers the same values the Node.js callback would\n     * deliver.\n     * @static true\n     * @name bindNodeCallback\n     * @owner Observable\n     */\n    BoundNodeCallbackObservable.create = function (func, selector, scheduler) {\n        if (selector === void 0) { selector = undefined; }\n        return function () {\n            var args = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                args[_i - 0] = arguments[_i];\n            }\n            return new BoundNodeCallbackObservable(func, selector, args, this, scheduler);\n        };\n    };\n    /** @deprecated internal use only */ BoundNodeCallbackObservable.prototype._subscribe = function (subscriber) {\n        var callbackFunc = this.callbackFunc;\n        var args = this.args;\n        var scheduler = this.scheduler;\n        var subject = this.subject;\n        if (!scheduler) {\n            if (!subject) {\n                subject = this.subject = new AsyncSubject_1.AsyncSubject();\n                var handler = function handlerFn() {\n                    var innerArgs = [];\n                    for (var _i = 0; _i < arguments.length; _i++) {\n                        innerArgs[_i - 0] = arguments[_i];\n                    }\n                    var source = handlerFn.source;\n                    var selector = source.selector, subject = source.subject;\n                    var err = innerArgs.shift();\n                    if (err) {\n                        subject.error(err);\n                    }\n                    else if (selector) {\n                        var result_1 = tryCatch_1.tryCatch(selector).apply(this, innerArgs);\n                        if (result_1 === errorObject_1.errorObject) {\n                            subject.error(errorObject_1.errorObject.e);\n                        }\n                        else {\n                            subject.next(result_1);\n                            subject.complete();\n                        }\n                    }\n                    else {\n                        subject.next(innerArgs.length <= 1 ? innerArgs[0] : innerArgs);\n                        subject.complete();\n                    }\n                };\n                // use named function instance to avoid closure.\n                handler.source = this;\n                var result = tryCatch_1.tryCatch(callbackFunc).apply(this.context, args.concat(handler));\n                if (result === errorObject_1.errorObject) {\n                    subject.error(errorObject_1.errorObject.e);\n                }\n            }\n            return subject.subscribe(subscriber);\n        }\n        else {\n            return scheduler.schedule(dispatch, 0, { source: this, subscriber: subscriber, context: this.context });\n        }\n    };\n    return BoundNodeCallbackObservable;\n}(Observable_1.Observable));\nexports.BoundNodeCallbackObservable = BoundNodeCallbackObservable;\nfunction dispatch(state) {\n    var self = this;\n    var source = state.source, subscriber = state.subscriber, context = state.context;\n    // XXX: cast to `any` to access to the private field in `source`.\n    var _a = source, callbackFunc = _a.callbackFunc, args = _a.args, scheduler = _a.scheduler;\n    var subject = source.subject;\n    if (!subject) {\n        subject = source.subject = new AsyncSubject_1.AsyncSubject();\n        var handler = function handlerFn() {\n            var innerArgs = [];\n            for (var _i = 0; _i < arguments.length; _i++) {\n                innerArgs[_i - 0] = arguments[_i];\n            }\n            var source = handlerFn.source;\n            var selector = source.selector, subject = source.subject;\n            var err = innerArgs.shift();\n            if (err) {\n                self.add(scheduler.schedule(dispatchError, 0, { err: err, subject: subject }));\n            }\n            else if (selector) {\n                var result_2 = tryCatch_1.tryCatch(selector).apply(this, innerArgs);\n                if (result_2 === errorObject_1.errorObject) {\n                    self.add(scheduler.schedule(dispatchError, 0, { err: errorObject_1.errorObject.e, subject: subject }));\n                }\n                else {\n                    self.add(scheduler.schedule(dispatchNext, 0, { value: result_2, subject: subject }));\n                }\n            }\n            else {\n                var value = innerArgs.length <= 1 ? innerArgs[0] : innerArgs;\n                self.add(scheduler.schedule(dispatchNext, 0, { value: value, subject: subject }));\n            }\n        };\n        // use named function to pass values in without closure\n        handler.source = source;\n        var result = tryCatch_1.tryCatch(callbackFunc).apply(context, args.concat(handler));\n        if (result === errorObject_1.errorObject) {\n            self.add(scheduler.schedule(dispatchError, 0, { err: errorObject_1.errorObject.e, subject: subject }));\n        }\n    }\n    self.add(subject.subscribe(subscriber));\n}\nfunction dispatchNext(arg) {\n    var value = arg.value, subject = arg.subject;\n    subject.next(value);\n    subject.complete();\n}\nfunction dispatchError(arg) {\n    var err = arg.err, subject = arg.subject;\n    subject.error(err);\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}
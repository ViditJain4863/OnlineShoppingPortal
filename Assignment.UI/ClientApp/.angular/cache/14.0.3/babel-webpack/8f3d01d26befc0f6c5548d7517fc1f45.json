{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function (d, b) {\n  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\n  function __() {\n    this.constructor = d;\n  }\n\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n\nvar Subscriber_1 = require('../Subscriber');\n\nvar async_1 = require('../scheduler/async');\n\nvar throttle_1 = require('./throttle');\n/**\n * Emits a value from the source Observable, then ignores subsequent source\n * values for `duration` milliseconds, then repeats this process.\n *\n * <span class=\"informal\">Lets a value pass, then ignores source values for the\n * next `duration` milliseconds.</span>\n *\n * <img src=\"./img/throttleTime.png\" width=\"100%\">\n *\n * `throttleTime` emits the source Observable values on the output Observable\n * when its internal timer is disabled, and ignores source values when the timer\n * is enabled. Initially, the timer is disabled. As soon as the first source\n * value arrives, it is forwarded to the output Observable, and then the timer\n * is enabled. After `duration` milliseconds (or the time unit determined\n * internally by the optional `scheduler`) has passed, the timer is disabled,\n * and this process repeats for the next source value. Optionally takes a\n * {@link IScheduler} for managing timers.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.throttleTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounceTime}\n * @see {@link delay}\n * @see {@link sampleTime}\n * @see {@link throttle}\n *\n * @param {number} duration Time to wait before emitting another value after\n * emitting the last value, measured in milliseconds or the time unit determined\n * internally by the optional `scheduler`.\n * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for\n * managing the timers that handle the throttling.\n * @return {Observable<T>} An Observable that performs the throttle operation to\n * limit the rate of emissions from the source.\n * @method throttleTime\n * @owner Observable\n */\n\n\nfunction throttleTime(duration, scheduler, config) {\n  if (scheduler === void 0) {\n    scheduler = async_1.async;\n  }\n\n  if (config === void 0) {\n    config = throttle_1.defaultThrottleConfig;\n  }\n\n  return function (source) {\n    return source.lift(new ThrottleTimeOperator(duration, scheduler, config.leading, config.trailing));\n  };\n}\n\nexports.throttleTime = throttleTime;\n\nvar ThrottleTimeOperator = function () {\n  function ThrottleTimeOperator(duration, scheduler, leading, trailing) {\n    this.duration = duration;\n    this.scheduler = scheduler;\n    this.leading = leading;\n    this.trailing = trailing;\n  }\n\n  ThrottleTimeOperator.prototype.call = function (subscriber, source) {\n    return source.subscribe(new ThrottleTimeSubscriber(subscriber, this.duration, this.scheduler, this.leading, this.trailing));\n  };\n\n  return ThrottleTimeOperator;\n}();\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\n\n\nvar ThrottleTimeSubscriber = function (_super) {\n  __extends(ThrottleTimeSubscriber, _super);\n\n  function ThrottleTimeSubscriber(destination, duration, scheduler, leading, trailing) {\n    _super.call(this, destination);\n\n    this.duration = duration;\n    this.scheduler = scheduler;\n    this.leading = leading;\n    this.trailing = trailing;\n    this._hasTrailingValue = false;\n    this._trailingValue = null;\n  }\n\n  ThrottleTimeSubscriber.prototype._next = function (value) {\n    if (this.throttled) {\n      if (this.trailing) {\n        this._trailingValue = value;\n        this._hasTrailingValue = true;\n      }\n    } else {\n      this.add(this.throttled = this.scheduler.schedule(dispatchNext, this.duration, {\n        subscriber: this\n      }));\n\n      if (this.leading) {\n        this.destination.next(value);\n      }\n    }\n  };\n\n  ThrottleTimeSubscriber.prototype.clearThrottle = function () {\n    var throttled = this.throttled;\n\n    if (throttled) {\n      if (this.trailing && this._hasTrailingValue) {\n        this.destination.next(this._trailingValue);\n        this._trailingValue = null;\n        this._hasTrailingValue = false;\n      }\n\n      throttled.unsubscribe();\n      this.remove(throttled);\n      this.throttled = null;\n    }\n  };\n\n  return ThrottleTimeSubscriber;\n}(Subscriber_1.Subscriber);\n\nfunction dispatchNext(arg) {\n  var subscriber = arg.subscriber;\n  subscriber.clearThrottle();\n}","map":{"version":3,"names":["__extends","d","b","p","hasOwnProperty","__","constructor","prototype","Object","create","Subscriber_1","require","async_1","throttle_1","throttleTime","duration","scheduler","config","async","defaultThrottleConfig","source","lift","ThrottleTimeOperator","leading","trailing","exports","call","subscriber","subscribe","ThrottleTimeSubscriber","_super","destination","_hasTrailingValue","_trailingValue","_next","value","throttled","add","schedule","dispatchNext","next","clearThrottle","unsubscribe","remove","Subscriber","arg"],"sources":["C:/Users/vidit.jain/node_modules/rxjs/operators/throttleTime.js"],"sourcesContent":["\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar Subscriber_1 = require('../Subscriber');\nvar async_1 = require('../scheduler/async');\nvar throttle_1 = require('./throttle');\n/**\n * Emits a value from the source Observable, then ignores subsequent source\n * values for `duration` milliseconds, then repeats this process.\n *\n * <span class=\"informal\">Lets a value pass, then ignores source values for the\n * next `duration` milliseconds.</span>\n *\n * <img src=\"./img/throttleTime.png\" width=\"100%\">\n *\n * `throttleTime` emits the source Observable values on the output Observable\n * when its internal timer is disabled, and ignores source values when the timer\n * is enabled. Initially, the timer is disabled. As soon as the first source\n * value arrives, it is forwarded to the output Observable, and then the timer\n * is enabled. After `duration` milliseconds (or the time unit determined\n * internally by the optional `scheduler`) has passed, the timer is disabled,\n * and this process repeats for the next source value. Optionally takes a\n * {@link IScheduler} for managing timers.\n *\n * @example <caption>Emit clicks at a rate of at most one click per second</caption>\n * var clicks = Rx.Observable.fromEvent(document, 'click');\n * var result = clicks.throttleTime(1000);\n * result.subscribe(x => console.log(x));\n *\n * @see {@link auditTime}\n * @see {@link debounceTime}\n * @see {@link delay}\n * @see {@link sampleTime}\n * @see {@link throttle}\n *\n * @param {number} duration Time to wait before emitting another value after\n * emitting the last value, measured in milliseconds or the time unit determined\n * internally by the optional `scheduler`.\n * @param {Scheduler} [scheduler=async] The {@link IScheduler} to use for\n * managing the timers that handle the throttling.\n * @return {Observable<T>} An Observable that performs the throttle operation to\n * limit the rate of emissions from the source.\n * @method throttleTime\n * @owner Observable\n */\nfunction throttleTime(duration, scheduler, config) {\n    if (scheduler === void 0) { scheduler = async_1.async; }\n    if (config === void 0) { config = throttle_1.defaultThrottleConfig; }\n    return function (source) { return source.lift(new ThrottleTimeOperator(duration, scheduler, config.leading, config.trailing)); };\n}\nexports.throttleTime = throttleTime;\nvar ThrottleTimeOperator = (function () {\n    function ThrottleTimeOperator(duration, scheduler, leading, trailing) {\n        this.duration = duration;\n        this.scheduler = scheduler;\n        this.leading = leading;\n        this.trailing = trailing;\n    }\n    ThrottleTimeOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new ThrottleTimeSubscriber(subscriber, this.duration, this.scheduler, this.leading, this.trailing));\n    };\n    return ThrottleTimeOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar ThrottleTimeSubscriber = (function (_super) {\n    __extends(ThrottleTimeSubscriber, _super);\n    function ThrottleTimeSubscriber(destination, duration, scheduler, leading, trailing) {\n        _super.call(this, destination);\n        this.duration = duration;\n        this.scheduler = scheduler;\n        this.leading = leading;\n        this.trailing = trailing;\n        this._hasTrailingValue = false;\n        this._trailingValue = null;\n    }\n    ThrottleTimeSubscriber.prototype._next = function (value) {\n        if (this.throttled) {\n            if (this.trailing) {\n                this._trailingValue = value;\n                this._hasTrailingValue = true;\n            }\n        }\n        else {\n            this.add(this.throttled = this.scheduler.schedule(dispatchNext, this.duration, { subscriber: this }));\n            if (this.leading) {\n                this.destination.next(value);\n            }\n        }\n    };\n    ThrottleTimeSubscriber.prototype.clearThrottle = function () {\n        var throttled = this.throttled;\n        if (throttled) {\n            if (this.trailing && this._hasTrailingValue) {\n                this.destination.next(this._trailingValue);\n                this._trailingValue = null;\n                this._hasTrailingValue = false;\n            }\n            throttled.unsubscribe();\n            this.remove(throttled);\n            this.throttled = null;\n        }\n    };\n    return ThrottleTimeSubscriber;\n}(Subscriber_1.Subscriber));\nfunction dispatchNext(arg) {\n    var subscriber = arg.subscriber;\n    subscriber.clearThrottle();\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}
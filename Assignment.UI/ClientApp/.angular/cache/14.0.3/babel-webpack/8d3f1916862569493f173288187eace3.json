{"ast":null,"code":"\"use strict\";\n\nvar __extends = this && this.__extends || function (d, b) {\n  for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n\n  function __() {\n    this.constructor = d;\n  }\n\n  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\n\nvar OuterSubscriber_1 = require('../OuterSubscriber');\n\nvar subscribeToResult_1 = require('../util/subscribeToResult');\n\nvar Set_1 = require('../util/Set');\n/**\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from previous items.\n *\n * If a keySelector function is provided, then it will project each value from the source observable into a new value that it will\n * check for equality with previously projected values. If a keySelector function is not provided, it will use each value from the\n * source observable directly with an equality check against previous values.\n *\n * In JavaScript runtimes that support `Set`, this operator will use a `Set` to improve performance of the distinct value checking.\n *\n * In other runtimes, this operator will use a minimal implementation of `Set` that relies on an `Array` and `indexOf` under the\n * hood, so performance will degrade as more values are checked for distinction. Even in newer browsers, a long-running `distinct`\n * use might result in memory leaks. To help alleviate this in some scenarios, an optional `flushes` parameter is also provided so\n * that the internal `Set` can be \"flushed\", basically clearing it of values.\n *\n * @example <caption>A simple example with numbers</caption>\n * Observable.of(1, 1, 2, 2, 2, 1, 2, 3, 4, 3, 2, 1)\n *   .distinct()\n *   .subscribe(x => console.log(x)); // 1, 2, 3, 4\n *\n * @example <caption>An example using a keySelector function</caption>\n * interface Person {\n *    age: number,\n *    name: string\n * }\n *\n * Observable.of<Person>(\n *     { age: 4, name: 'Foo'},\n *     { age: 7, name: 'Bar'},\n *     { age: 5, name: 'Foo'})\n *     .distinct((p: Person) => p.name)\n *     .subscribe(x => console.log(x));\n *\n * // displays:\n * // { age: 4, name: 'Foo' }\n * // { age: 7, name: 'Bar' }\n *\n * @see {@link distinctUntilChanged}\n * @see {@link distinctUntilKeyChanged}\n *\n * @param {function} [keySelector] Optional function to select which value you want to check as distinct.\n * @param {Observable} [flushes] Optional Observable for flushing the internal HashSet of the operator.\n * @return {Observable} An Observable that emits items from the source Observable with distinct values.\n * @method distinct\n * @owner Observable\n */\n\n\nfunction distinct(keySelector, flushes) {\n  return function (source) {\n    return source.lift(new DistinctOperator(keySelector, flushes));\n  };\n}\n\nexports.distinct = distinct;\n\nvar DistinctOperator = function () {\n  function DistinctOperator(keySelector, flushes) {\n    this.keySelector = keySelector;\n    this.flushes = flushes;\n  }\n\n  DistinctOperator.prototype.call = function (subscriber, source) {\n    return source.subscribe(new DistinctSubscriber(subscriber, this.keySelector, this.flushes));\n  };\n\n  return DistinctOperator;\n}();\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\n\n\nvar DistinctSubscriber = function (_super) {\n  __extends(DistinctSubscriber, _super);\n\n  function DistinctSubscriber(destination, keySelector, flushes) {\n    _super.call(this, destination);\n\n    this.keySelector = keySelector;\n    this.values = new Set_1.Set();\n\n    if (flushes) {\n      this.add(subscribeToResult_1.subscribeToResult(this, flushes));\n    }\n  }\n\n  DistinctSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n    this.values.clear();\n  };\n\n  DistinctSubscriber.prototype.notifyError = function (error, innerSub) {\n    this._error(error);\n  };\n\n  DistinctSubscriber.prototype._next = function (value) {\n    if (this.keySelector) {\n      this._useKeySelector(value);\n    } else {\n      this._finalizeNext(value, value);\n    }\n  };\n\n  DistinctSubscriber.prototype._useKeySelector = function (value) {\n    var key;\n    var destination = this.destination;\n\n    try {\n      key = this.keySelector(value);\n    } catch (err) {\n      destination.error(err);\n      return;\n    }\n\n    this._finalizeNext(key, value);\n  };\n\n  DistinctSubscriber.prototype._finalizeNext = function (key, value) {\n    var values = this.values;\n\n    if (!values.has(key)) {\n      values.add(key);\n      this.destination.next(value);\n    }\n  };\n\n  return DistinctSubscriber;\n}(OuterSubscriber_1.OuterSubscriber);\n\nexports.DistinctSubscriber = DistinctSubscriber;","map":{"version":3,"names":["__extends","d","b","p","hasOwnProperty","__","constructor","prototype","Object","create","OuterSubscriber_1","require","subscribeToResult_1","Set_1","distinct","keySelector","flushes","source","lift","DistinctOperator","exports","call","subscriber","subscribe","DistinctSubscriber","_super","destination","values","Set","add","subscribeToResult","notifyNext","outerValue","innerValue","outerIndex","innerIndex","innerSub","clear","notifyError","error","_error","_next","value","_useKeySelector","_finalizeNext","key","err","has","next","OuterSubscriber"],"sources":["C:/Users/vidit.jain/node_modules/rxjs/operators/distinct.js"],"sourcesContent":["\"use strict\";\nvar __extends = (this && this.__extends) || function (d, b) {\n    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    function __() { this.constructor = d; }\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n};\nvar OuterSubscriber_1 = require('../OuterSubscriber');\nvar subscribeToResult_1 = require('../util/subscribeToResult');\nvar Set_1 = require('../util/Set');\n/**\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from previous items.\n *\n * If a keySelector function is provided, then it will project each value from the source observable into a new value that it will\n * check for equality with previously projected values. If a keySelector function is not provided, it will use each value from the\n * source observable directly with an equality check against previous values.\n *\n * In JavaScript runtimes that support `Set`, this operator will use a `Set` to improve performance of the distinct value checking.\n *\n * In other runtimes, this operator will use a minimal implementation of `Set` that relies on an `Array` and `indexOf` under the\n * hood, so performance will degrade as more values are checked for distinction. Even in newer browsers, a long-running `distinct`\n * use might result in memory leaks. To help alleviate this in some scenarios, an optional `flushes` parameter is also provided so\n * that the internal `Set` can be \"flushed\", basically clearing it of values.\n *\n * @example <caption>A simple example with numbers</caption>\n * Observable.of(1, 1, 2, 2, 2, 1, 2, 3, 4, 3, 2, 1)\n *   .distinct()\n *   .subscribe(x => console.log(x)); // 1, 2, 3, 4\n *\n * @example <caption>An example using a keySelector function</caption>\n * interface Person {\n *    age: number,\n *    name: string\n * }\n *\n * Observable.of<Person>(\n *     { age: 4, name: 'Foo'},\n *     { age: 7, name: 'Bar'},\n *     { age: 5, name: 'Foo'})\n *     .distinct((p: Person) => p.name)\n *     .subscribe(x => console.log(x));\n *\n * // displays:\n * // { age: 4, name: 'Foo' }\n * // { age: 7, name: 'Bar' }\n *\n * @see {@link distinctUntilChanged}\n * @see {@link distinctUntilKeyChanged}\n *\n * @param {function} [keySelector] Optional function to select which value you want to check as distinct.\n * @param {Observable} [flushes] Optional Observable for flushing the internal HashSet of the operator.\n * @return {Observable} An Observable that emits items from the source Observable with distinct values.\n * @method distinct\n * @owner Observable\n */\nfunction distinct(keySelector, flushes) {\n    return function (source) { return source.lift(new DistinctOperator(keySelector, flushes)); };\n}\nexports.distinct = distinct;\nvar DistinctOperator = (function () {\n    function DistinctOperator(keySelector, flushes) {\n        this.keySelector = keySelector;\n        this.flushes = flushes;\n    }\n    DistinctOperator.prototype.call = function (subscriber, source) {\n        return source.subscribe(new DistinctSubscriber(subscriber, this.keySelector, this.flushes));\n    };\n    return DistinctOperator;\n}());\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nvar DistinctSubscriber = (function (_super) {\n    __extends(DistinctSubscriber, _super);\n    function DistinctSubscriber(destination, keySelector, flushes) {\n        _super.call(this, destination);\n        this.keySelector = keySelector;\n        this.values = new Set_1.Set();\n        if (flushes) {\n            this.add(subscribeToResult_1.subscribeToResult(this, flushes));\n        }\n    }\n    DistinctSubscriber.prototype.notifyNext = function (outerValue, innerValue, outerIndex, innerIndex, innerSub) {\n        this.values.clear();\n    };\n    DistinctSubscriber.prototype.notifyError = function (error, innerSub) {\n        this._error(error);\n    };\n    DistinctSubscriber.prototype._next = function (value) {\n        if (this.keySelector) {\n            this._useKeySelector(value);\n        }\n        else {\n            this._finalizeNext(value, value);\n        }\n    };\n    DistinctSubscriber.prototype._useKeySelector = function (value) {\n        var key;\n        var destination = this.destination;\n        try {\n            key = this.keySelector(value);\n        }\n        catch (err) {\n            destination.error(err);\n            return;\n        }\n        this._finalizeNext(key, value);\n    };\n    DistinctSubscriber.prototype._finalizeNext = function (key, value) {\n        var values = this.values;\n        if (!values.has(key)) {\n            values.add(key);\n            this.destination.next(value);\n        }\n    };\n    return DistinctSubscriber;\n}(OuterSubscriber_1.OuterSubscriber));\nexports.DistinctSubscriber = DistinctSubscriber;\n"],"mappings":"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"},"metadata":{},"sourceType":"script"}